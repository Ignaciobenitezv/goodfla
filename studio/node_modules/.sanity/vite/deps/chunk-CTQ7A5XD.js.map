{
  "version": 3,
  "sources": ["../../../property-information/lib/util/schema.js", "../../../property-information/lib/util/merge.js", "../../../property-information/lib/normalize.js", "../../../property-information/lib/util/info.js", "../../../property-information/lib/util/types.js", "../../../property-information/lib/util/defined-info.js", "../../../property-information/lib/util/create.js", "../../../property-information/lib/aria.js", "../../../property-information/lib/util/case-sensitive-transform.js", "../../../property-information/lib/util/case-insensitive-transform.js", "../../../property-information/lib/html.js", "../../../property-information/lib/svg.js", "../../../property-information/lib/xlink.js", "../../../property-information/lib/xmlns.js", "../../../property-information/lib/xml.js", "../../../property-information/lib/find.js", "../../../property-information/index.js", "../../../comma-separated-tokens/index.js", "../../../hast-util-parse-selector/lib/index.js", "../../../space-separated-tokens/index.js", "../../../hastscript/lib/create-h.js", "../../../hastscript/lib/svg-case-sensitive-tag-names.js", "../../../hastscript/lib/index.js", "../../../character-entities-legacy/index.js", "../../../character-reference-invalid/index.js", "../../../is-decimal/index.js", "../../../is-hexadecimal/index.js", "../../../is-alphabetical/index.js", "../../../is-alphanumerical/index.js", "../../../decode-named-character-reference/index.dom.js", "../../../parse-entities/lib/index.js", "../../../refractor/lib/prism-core.js", "../../../refractor/lib/core.js", "../../../unist-util-is/lib/index.js", "../../../unist-util-filter/lib/index.js", "../../../unist-util-visit-parents/lib/color.js", "../../../unist-util-visit-parents/lib/index.js", "../../../react-refractor/src/addMarkers.ts", "../../../react-refractor/src/mapChildren.ts", "../../../react-refractor/src/Refractor.tsx"],
  "sourcesContent": ["/**\r\n * @import {Schema as SchemaType, Space} from 'property-information'\r\n */\r\n\r\n/** @type {SchemaType} */\r\nexport class Schema {\r\n  /**\r\n   * @param {SchemaType['property']} property\r\n   *   Property.\r\n   * @param {SchemaType['normal']} normal\r\n   *   Normal.\r\n   * @param {Space | undefined} [space]\r\n   *   Space.\r\n   * @returns\r\n   *   Schema.\r\n   */\r\n  constructor(property, normal, space) {\r\n    this.normal = normal\r\n    this.property = property\r\n\r\n    if (space) {\r\n      this.space = space\r\n    }\r\n  }\r\n}\r\n\r\nSchema.prototype.normal = {}\r\nSchema.prototype.property = {}\r\nSchema.prototype.space = undefined\r\n", "/**\r\n * @import {Info, Space} from 'property-information'\r\n */\r\n\r\nimport {Schema} from './schema.js'\r\n\r\n/**\r\n * @param {ReadonlyArray<Schema>} definitions\r\n *   Definitions.\r\n * @param {Space | undefined} [space]\r\n *   Space.\r\n * @returns {Schema}\r\n *   Schema.\r\n */\r\nexport function merge(definitions, space) {\r\n  /** @type {Record<string, Info>} */\r\n  const property = {}\r\n  /** @type {Record<string, string>} */\r\n  const normal = {}\r\n\r\n  for (const definition of definitions) {\r\n    Object.assign(property, definition.property)\r\n    Object.assign(normal, definition.normal)\r\n  }\r\n\r\n  return new Schema(property, normal, space)\r\n}\r\n", "/**\r\n * Get the cleaned case insensitive form of an attribute or property.\r\n *\r\n * @param {string} value\r\n *   An attribute-like or property-like name.\r\n * @returns {string}\r\n *   Value that can be used to look up the properly cased property on a\r\n *   `Schema`.\r\n */\r\nexport function normalize(value) {\r\n  return value.toLowerCase()\r\n}\r\n", "/**\r\n * @import {Info as InfoType} from 'property-information'\r\n */\r\n\r\n/** @type {InfoType} */\r\nexport class Info {\r\n  /**\r\n   * @param {string} property\r\n   *   Property.\r\n   * @param {string} attribute\r\n   *   Attribute.\r\n   * @returns\r\n   *   Info.\r\n   */\r\n  constructor(property, attribute) {\r\n    this.attribute = attribute\r\n    this.property = property\r\n  }\r\n}\r\n\r\nInfo.prototype.attribute = ''\r\nInfo.prototype.booleanish = false\r\nInfo.prototype.boolean = false\r\nInfo.prototype.commaOrSpaceSeparated = false\r\nInfo.prototype.commaSeparated = false\r\nInfo.prototype.defined = false\r\nInfo.prototype.mustUseProperty = false\r\nInfo.prototype.number = false\r\nInfo.prototype.overloadedBoolean = false\r\nInfo.prototype.property = ''\r\nInfo.prototype.spaceSeparated = false\r\nInfo.prototype.space = undefined\r\n", "let powers = 0\r\n\r\nexport const boolean = increment()\r\nexport const booleanish = increment()\r\nexport const overloadedBoolean = increment()\r\nexport const number = increment()\r\nexport const spaceSeparated = increment()\r\nexport const commaSeparated = increment()\r\nexport const commaOrSpaceSeparated = increment()\r\n\r\nfunction increment() {\r\n  return 2 ** ++powers\r\n}\r\n", "/**\r\n * @import {Space} from 'property-information'\r\n */\r\n\r\nimport {Info} from './info.js'\r\nimport * as types from './types.js'\r\n\r\nconst checks = /** @type {ReadonlyArray<keyof typeof types>} */ (\r\n  Object.keys(types)\r\n)\r\n\r\nexport class DefinedInfo extends Info {\r\n  /**\r\n   * @constructor\r\n   * @param {string} property\r\n   *   Property.\r\n   * @param {string} attribute\r\n   *   Attribute.\r\n   * @param {number | null | undefined} [mask]\r\n   *   Mask.\r\n   * @param {Space | undefined} [space]\r\n   *   Space.\r\n   * @returns\r\n   *   Info.\r\n   */\r\n  constructor(property, attribute, mask, space) {\r\n    let index = -1\r\n\r\n    super(property, attribute)\r\n\r\n    mark(this, 'space', space)\r\n\r\n    if (typeof mask === 'number') {\r\n      while (++index < checks.length) {\r\n        const check = checks[index]\r\n        mark(this, checks[index], (mask & types[check]) === types[check])\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nDefinedInfo.prototype.defined = true\r\n\r\n/**\r\n * @template {keyof DefinedInfo} Key\r\n *   Key type.\r\n * @param {DefinedInfo} values\r\n *   Info.\r\n * @param {Key} key\r\n *   Key.\r\n * @param {DefinedInfo[Key]} value\r\n *   Value.\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nfunction mark(values, key, value) {\r\n  if (value) {\r\n    values[key] = value\r\n  }\r\n}\r\n", "/**\r\n * @import {Info, Space} from 'property-information'\r\n */\r\n\r\n/**\r\n * @typedef Definition\r\n *   Definition of a schema.\r\n * @property {Record<string, string> | undefined} [attributes]\r\n *   Normalzed names to special attribute case.\r\n * @property {ReadonlyArray<string> | undefined} [mustUseProperty]\r\n *   Normalized names that must be set as properties.\r\n * @property {Record<string, number | null>} properties\r\n *   Property names to their types.\r\n * @property {Space | undefined} [space]\r\n *   Space.\r\n * @property {Transform} transform\r\n *   Transform a property name.\r\n */\r\n\r\n/**\r\n * @callback Transform\r\n *   Transform.\r\n * @param {Record<string, string>} attributes\r\n *   Attributes.\r\n * @param {string} property\r\n *   Property.\r\n * @returns {string}\r\n *   Attribute.\r\n */\r\n\r\nimport {normalize} from '../normalize.js'\r\nimport {DefinedInfo} from './defined-info.js'\r\nimport {Schema} from './schema.js'\r\n\r\n/**\r\n * @param {Definition} definition\r\n *   Definition.\r\n * @returns {Schema}\r\n *   Schema.\r\n */\r\nexport function create(definition) {\r\n  /** @type {Record<string, Info>} */\r\n  const properties = {}\r\n  /** @type {Record<string, string>} */\r\n  const normals = {}\r\n\r\n  for (const [property, value] of Object.entries(definition.properties)) {\r\n    const info = new DefinedInfo(\r\n      property,\r\n      definition.transform(definition.attributes || {}, property),\r\n      value,\r\n      definition.space\r\n    )\r\n\r\n    if (\r\n      definition.mustUseProperty &&\r\n      definition.mustUseProperty.includes(property)\r\n    ) {\r\n      info.mustUseProperty = true\r\n    }\r\n\r\n    properties[property] = info\r\n\r\n    normals[normalize(property)] = property\r\n    normals[normalize(info.attribute)] = property\r\n  }\r\n\r\n  return new Schema(properties, normals, definition.space)\r\n}\r\n", "import {create} from './util/create.js'\r\nimport {booleanish, number, spaceSeparated} from './util/types.js'\r\n\r\nexport const aria = create({\r\n  properties: {\r\n    ariaActiveDescendant: null,\r\n    ariaAtomic: booleanish,\r\n    ariaAutoComplete: null,\r\n    ariaBusy: booleanish,\r\n    ariaChecked: booleanish,\r\n    ariaColCount: number,\r\n    ariaColIndex: number,\r\n    ariaColSpan: number,\r\n    ariaControls: spaceSeparated,\r\n    ariaCurrent: null,\r\n    ariaDescribedBy: spaceSeparated,\r\n    ariaDetails: null,\r\n    ariaDisabled: booleanish,\r\n    ariaDropEffect: spaceSeparated,\r\n    ariaErrorMessage: null,\r\n    ariaExpanded: booleanish,\r\n    ariaFlowTo: spaceSeparated,\r\n    ariaGrabbed: booleanish,\r\n    ariaHasPopup: null,\r\n    ariaHidden: booleanish,\r\n    ariaInvalid: null,\r\n    ariaKeyShortcuts: null,\r\n    ariaLabel: null,\r\n    ariaLabelledBy: spaceSeparated,\r\n    ariaLevel: number,\r\n    ariaLive: null,\r\n    ariaModal: booleanish,\r\n    ariaMultiLine: booleanish,\r\n    ariaMultiSelectable: booleanish,\r\n    ariaOrientation: null,\r\n    ariaOwns: spaceSeparated,\r\n    ariaPlaceholder: null,\r\n    ariaPosInSet: number,\r\n    ariaPressed: booleanish,\r\n    ariaReadOnly: booleanish,\r\n    ariaRelevant: null,\r\n    ariaRequired: booleanish,\r\n    ariaRoleDescription: spaceSeparated,\r\n    ariaRowCount: number,\r\n    ariaRowIndex: number,\r\n    ariaRowSpan: number,\r\n    ariaSelected: booleanish,\r\n    ariaSetSize: number,\r\n    ariaSort: null,\r\n    ariaValueMax: number,\r\n    ariaValueMin: number,\r\n    ariaValueNow: number,\r\n    ariaValueText: null,\r\n    role: null\r\n  },\r\n  transform(_, property) {\r\n    return property === 'role'\r\n      ? property\r\n      : 'aria-' + property.slice(4).toLowerCase()\r\n  }\r\n})\r\n", "/**\r\n * @param {Record<string, string>} attributes\r\n *   Attributes.\r\n * @param {string} attribute\r\n *   Attribute.\r\n * @returns {string}\r\n *   Transformed attribute.\r\n */\r\nexport function caseSensitiveTransform(attributes, attribute) {\r\n  return attribute in attributes ? attributes[attribute] : attribute\r\n}\r\n", "import {caseSensitiveTransform} from './case-sensitive-transform.js'\r\n\r\n/**\r\n * @param {Record<string, string>} attributes\r\n *   Attributes.\r\n * @param {string} property\r\n *   Property.\r\n * @returns {string}\r\n *   Transformed property.\r\n */\r\nexport function caseInsensitiveTransform(attributes, property) {\r\n  return caseSensitiveTransform(attributes, property.toLowerCase())\r\n}\r\n", "import {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\r\nimport {create} from './util/create.js'\r\nimport {\r\n  booleanish,\r\n  boolean,\r\n  commaSeparated,\r\n  number,\r\n  overloadedBoolean,\r\n  spaceSeparated\r\n} from './util/types.js'\r\n\r\nexport const html = create({\r\n  attributes: {\r\n    acceptcharset: 'accept-charset',\r\n    classname: 'class',\r\n    htmlfor: 'for',\r\n    httpequiv: 'http-equiv'\r\n  },\r\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\r\n  properties: {\r\n    // Standard Properties.\r\n    abbr: null,\r\n    accept: commaSeparated,\r\n    acceptCharset: spaceSeparated,\r\n    accessKey: spaceSeparated,\r\n    action: null,\r\n    allow: null,\r\n    allowFullScreen: boolean,\r\n    allowPaymentRequest: boolean,\r\n    allowUserMedia: boolean,\r\n    alt: null,\r\n    as: null,\r\n    async: boolean,\r\n    autoCapitalize: null,\r\n    autoComplete: spaceSeparated,\r\n    autoFocus: boolean,\r\n    autoPlay: boolean,\r\n    blocking: spaceSeparated,\r\n    capture: null,\r\n    charSet: null,\r\n    checked: boolean,\r\n    cite: null,\r\n    className: spaceSeparated,\r\n    cols: number,\r\n    colSpan: null,\r\n    content: null,\r\n    contentEditable: booleanish,\r\n    controls: boolean,\r\n    controlsList: spaceSeparated,\r\n    coords: number | commaSeparated,\r\n    crossOrigin: null,\r\n    data: null,\r\n    dateTime: null,\r\n    decoding: null,\r\n    default: boolean,\r\n    defer: boolean,\r\n    dir: null,\r\n    dirName: null,\r\n    disabled: boolean,\r\n    download: overloadedBoolean,\r\n    draggable: booleanish,\r\n    encType: null,\r\n    enterKeyHint: null,\r\n    fetchPriority: null,\r\n    form: null,\r\n    formAction: null,\r\n    formEncType: null,\r\n    formMethod: null,\r\n    formNoValidate: boolean,\r\n    formTarget: null,\r\n    headers: spaceSeparated,\r\n    height: number,\r\n    hidden: overloadedBoolean,\r\n    high: number,\r\n    href: null,\r\n    hrefLang: null,\r\n    htmlFor: spaceSeparated,\r\n    httpEquiv: spaceSeparated,\r\n    id: null,\r\n    imageSizes: null,\r\n    imageSrcSet: null,\r\n    inert: boolean,\r\n    inputMode: null,\r\n    integrity: null,\r\n    is: null,\r\n    isMap: boolean,\r\n    itemId: null,\r\n    itemProp: spaceSeparated,\r\n    itemRef: spaceSeparated,\r\n    itemScope: boolean,\r\n    itemType: spaceSeparated,\r\n    kind: null,\r\n    label: null,\r\n    lang: null,\r\n    language: null,\r\n    list: null,\r\n    loading: null,\r\n    loop: boolean,\r\n    low: number,\r\n    manifest: null,\r\n    max: null,\r\n    maxLength: number,\r\n    media: null,\r\n    method: null,\r\n    min: null,\r\n    minLength: number,\r\n    multiple: boolean,\r\n    muted: boolean,\r\n    name: null,\r\n    nonce: null,\r\n    noModule: boolean,\r\n    noValidate: boolean,\r\n    onAbort: null,\r\n    onAfterPrint: null,\r\n    onAuxClick: null,\r\n    onBeforeMatch: null,\r\n    onBeforePrint: null,\r\n    onBeforeToggle: null,\r\n    onBeforeUnload: null,\r\n    onBlur: null,\r\n    onCancel: null,\r\n    onCanPlay: null,\r\n    onCanPlayThrough: null,\r\n    onChange: null,\r\n    onClick: null,\r\n    onClose: null,\r\n    onContextLost: null,\r\n    onContextMenu: null,\r\n    onContextRestored: null,\r\n    onCopy: null,\r\n    onCueChange: null,\r\n    onCut: null,\r\n    onDblClick: null,\r\n    onDrag: null,\r\n    onDragEnd: null,\r\n    onDragEnter: null,\r\n    onDragExit: null,\r\n    onDragLeave: null,\r\n    onDragOver: null,\r\n    onDragStart: null,\r\n    onDrop: null,\r\n    onDurationChange: null,\r\n    onEmptied: null,\r\n    onEnded: null,\r\n    onError: null,\r\n    onFocus: null,\r\n    onFormData: null,\r\n    onHashChange: null,\r\n    onInput: null,\r\n    onInvalid: null,\r\n    onKeyDown: null,\r\n    onKeyPress: null,\r\n    onKeyUp: null,\r\n    onLanguageChange: null,\r\n    onLoad: null,\r\n    onLoadedData: null,\r\n    onLoadedMetadata: null,\r\n    onLoadEnd: null,\r\n    onLoadStart: null,\r\n    onMessage: null,\r\n    onMessageError: null,\r\n    onMouseDown: null,\r\n    onMouseEnter: null,\r\n    onMouseLeave: null,\r\n    onMouseMove: null,\r\n    onMouseOut: null,\r\n    onMouseOver: null,\r\n    onMouseUp: null,\r\n    onOffline: null,\r\n    onOnline: null,\r\n    onPageHide: null,\r\n    onPageShow: null,\r\n    onPaste: null,\r\n    onPause: null,\r\n    onPlay: null,\r\n    onPlaying: null,\r\n    onPopState: null,\r\n    onProgress: null,\r\n    onRateChange: null,\r\n    onRejectionHandled: null,\r\n    onReset: null,\r\n    onResize: null,\r\n    onScroll: null,\r\n    onScrollEnd: null,\r\n    onSecurityPolicyViolation: null,\r\n    onSeeked: null,\r\n    onSeeking: null,\r\n    onSelect: null,\r\n    onSlotChange: null,\r\n    onStalled: null,\r\n    onStorage: null,\r\n    onSubmit: null,\r\n    onSuspend: null,\r\n    onTimeUpdate: null,\r\n    onToggle: null,\r\n    onUnhandledRejection: null,\r\n    onUnload: null,\r\n    onVolumeChange: null,\r\n    onWaiting: null,\r\n    onWheel: null,\r\n    open: boolean,\r\n    optimum: number,\r\n    pattern: null,\r\n    ping: spaceSeparated,\r\n    placeholder: null,\r\n    playsInline: boolean,\r\n    popover: null,\r\n    popoverTarget: null,\r\n    popoverTargetAction: null,\r\n    poster: null,\r\n    preload: null,\r\n    readOnly: boolean,\r\n    referrerPolicy: null,\r\n    rel: spaceSeparated,\r\n    required: boolean,\r\n    reversed: boolean,\r\n    rows: number,\r\n    rowSpan: number,\r\n    sandbox: spaceSeparated,\r\n    scope: null,\r\n    scoped: boolean,\r\n    seamless: boolean,\r\n    selected: boolean,\r\n    shadowRootClonable: boolean,\r\n    shadowRootDelegatesFocus: boolean,\r\n    shadowRootMode: null,\r\n    shape: null,\r\n    size: number,\r\n    sizes: null,\r\n    slot: null,\r\n    span: number,\r\n    spellCheck: booleanish,\r\n    src: null,\r\n    srcDoc: null,\r\n    srcLang: null,\r\n    srcSet: null,\r\n    start: number,\r\n    step: null,\r\n    style: null,\r\n    tabIndex: number,\r\n    target: null,\r\n    title: null,\r\n    translate: null,\r\n    type: null,\r\n    typeMustMatch: boolean,\r\n    useMap: null,\r\n    value: booleanish,\r\n    width: number,\r\n    wrap: null,\r\n    writingSuggestions: null,\r\n\r\n    // Legacy.\r\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\r\n    align: null, // Several. Use CSS `text-align` instead,\r\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\r\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\r\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\r\n    background: null, // `<body>`. Use CSS `background-image` instead\r\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\r\n    border: number, // `<table>`. Use CSS `border-width` instead,\r\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\r\n    bottomMargin: number, // `<body>`\r\n    cellPadding: null, // `<table>`\r\n    cellSpacing: null, // `<table>`\r\n    char: null, // Several table elements. When `align=char`, sets the character to align on\r\n    charOff: null, // Several table elements. When `char`, offsets the alignment\r\n    classId: null, // `<object>`\r\n    clear: null, // `<br>`. Use CSS `clear` instead\r\n    code: null, // `<object>`\r\n    codeBase: null, // `<object>`\r\n    codeType: null, // `<object>`\r\n    color: null, // `<font>` and `<hr>`. Use CSS instead\r\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\r\n    declare: boolean, // `<object>`\r\n    event: null, // `<script>`\r\n    face: null, // `<font>`. Use CSS instead\r\n    frame: null, // `<table>`\r\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\r\n    hSpace: number, // `<img>` and `<object>`\r\n    leftMargin: number, // `<body>`\r\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\r\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\r\n    lowSrc: null, // `<img>`. Use a `<picture>`\r\n    marginHeight: number, // `<body>`\r\n    marginWidth: number, // `<body>`\r\n    noResize: boolean, // `<frame>`\r\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\r\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\r\n    noWrap: boolean, // `<td>` and `<th>`\r\n    object: null, // `<applet>`\r\n    profile: null, // `<head>`\r\n    prompt: null, // `<isindex>`\r\n    rev: null, // `<link>`\r\n    rightMargin: number, // `<body>`\r\n    rules: null, // `<table>`\r\n    scheme: null, // `<meta>`\r\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\r\n    standby: null, // `<object>`\r\n    summary: null, // `<table>`\r\n    text: null, // `<body>`. Use CSS `color` instead\r\n    topMargin: number, // `<body>`\r\n    valueType: null, // `<param>`\r\n    version: null, // `<html>`. Use a doctype.\r\n    vAlign: null, // Several. Use CSS `vertical-align` instead\r\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\r\n    vSpace: number, // `<img>` and `<object>`\r\n\r\n    // Non-standard Properties.\r\n    allowTransparency: null,\r\n    autoCorrect: null,\r\n    autoSave: null,\r\n    disablePictureInPicture: boolean,\r\n    disableRemotePlayback: boolean,\r\n    prefix: null,\r\n    property: null,\r\n    results: number,\r\n    security: null,\r\n    unselectable: null\r\n  },\r\n  space: 'html',\r\n  transform: caseInsensitiveTransform\r\n})\r\n", "import {caseSensitiveTransform} from './util/case-sensitive-transform.js'\r\nimport {create} from './util/create.js'\r\nimport {\r\n  boolean,\r\n  commaOrSpaceSeparated,\r\n  commaSeparated,\r\n  number,\r\n  spaceSeparated\r\n} from './util/types.js'\r\n\r\nexport const svg = create({\r\n  attributes: {\r\n    accentHeight: 'accent-height',\r\n    alignmentBaseline: 'alignment-baseline',\r\n    arabicForm: 'arabic-form',\r\n    baselineShift: 'baseline-shift',\r\n    capHeight: 'cap-height',\r\n    className: 'class',\r\n    clipPath: 'clip-path',\r\n    clipRule: 'clip-rule',\r\n    colorInterpolation: 'color-interpolation',\r\n    colorInterpolationFilters: 'color-interpolation-filters',\r\n    colorProfile: 'color-profile',\r\n    colorRendering: 'color-rendering',\r\n    crossOrigin: 'crossorigin',\r\n    dataType: 'datatype',\r\n    dominantBaseline: 'dominant-baseline',\r\n    enableBackground: 'enable-background',\r\n    fillOpacity: 'fill-opacity',\r\n    fillRule: 'fill-rule',\r\n    floodColor: 'flood-color',\r\n    floodOpacity: 'flood-opacity',\r\n    fontFamily: 'font-family',\r\n    fontSize: 'font-size',\r\n    fontSizeAdjust: 'font-size-adjust',\r\n    fontStretch: 'font-stretch',\r\n    fontStyle: 'font-style',\r\n    fontVariant: 'font-variant',\r\n    fontWeight: 'font-weight',\r\n    glyphName: 'glyph-name',\r\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\r\n    glyphOrientationVertical: 'glyph-orientation-vertical',\r\n    hrefLang: 'hreflang',\r\n    horizAdvX: 'horiz-adv-x',\r\n    horizOriginX: 'horiz-origin-x',\r\n    horizOriginY: 'horiz-origin-y',\r\n    imageRendering: 'image-rendering',\r\n    letterSpacing: 'letter-spacing',\r\n    lightingColor: 'lighting-color',\r\n    markerEnd: 'marker-end',\r\n    markerMid: 'marker-mid',\r\n    markerStart: 'marker-start',\r\n    navDown: 'nav-down',\r\n    navDownLeft: 'nav-down-left',\r\n    navDownRight: 'nav-down-right',\r\n    navLeft: 'nav-left',\r\n    navNext: 'nav-next',\r\n    navPrev: 'nav-prev',\r\n    navRight: 'nav-right',\r\n    navUp: 'nav-up',\r\n    navUpLeft: 'nav-up-left',\r\n    navUpRight: 'nav-up-right',\r\n    onAbort: 'onabort',\r\n    onActivate: 'onactivate',\r\n    onAfterPrint: 'onafterprint',\r\n    onBeforePrint: 'onbeforeprint',\r\n    onBegin: 'onbegin',\r\n    onCancel: 'oncancel',\r\n    onCanPlay: 'oncanplay',\r\n    onCanPlayThrough: 'oncanplaythrough',\r\n    onChange: 'onchange',\r\n    onClick: 'onclick',\r\n    onClose: 'onclose',\r\n    onCopy: 'oncopy',\r\n    onCueChange: 'oncuechange',\r\n    onCut: 'oncut',\r\n    onDblClick: 'ondblclick',\r\n    onDrag: 'ondrag',\r\n    onDragEnd: 'ondragend',\r\n    onDragEnter: 'ondragenter',\r\n    onDragExit: 'ondragexit',\r\n    onDragLeave: 'ondragleave',\r\n    onDragOver: 'ondragover',\r\n    onDragStart: 'ondragstart',\r\n    onDrop: 'ondrop',\r\n    onDurationChange: 'ondurationchange',\r\n    onEmptied: 'onemptied',\r\n    onEnd: 'onend',\r\n    onEnded: 'onended',\r\n    onError: 'onerror',\r\n    onFocus: 'onfocus',\r\n    onFocusIn: 'onfocusin',\r\n    onFocusOut: 'onfocusout',\r\n    onHashChange: 'onhashchange',\r\n    onInput: 'oninput',\r\n    onInvalid: 'oninvalid',\r\n    onKeyDown: 'onkeydown',\r\n    onKeyPress: 'onkeypress',\r\n    onKeyUp: 'onkeyup',\r\n    onLoad: 'onload',\r\n    onLoadedData: 'onloadeddata',\r\n    onLoadedMetadata: 'onloadedmetadata',\r\n    onLoadStart: 'onloadstart',\r\n    onMessage: 'onmessage',\r\n    onMouseDown: 'onmousedown',\r\n    onMouseEnter: 'onmouseenter',\r\n    onMouseLeave: 'onmouseleave',\r\n    onMouseMove: 'onmousemove',\r\n    onMouseOut: 'onmouseout',\r\n    onMouseOver: 'onmouseover',\r\n    onMouseUp: 'onmouseup',\r\n    onMouseWheel: 'onmousewheel',\r\n    onOffline: 'onoffline',\r\n    onOnline: 'ononline',\r\n    onPageHide: 'onpagehide',\r\n    onPageShow: 'onpageshow',\r\n    onPaste: 'onpaste',\r\n    onPause: 'onpause',\r\n    onPlay: 'onplay',\r\n    onPlaying: 'onplaying',\r\n    onPopState: 'onpopstate',\r\n    onProgress: 'onprogress',\r\n    onRateChange: 'onratechange',\r\n    onRepeat: 'onrepeat',\r\n    onReset: 'onreset',\r\n    onResize: 'onresize',\r\n    onScroll: 'onscroll',\r\n    onSeeked: 'onseeked',\r\n    onSeeking: 'onseeking',\r\n    onSelect: 'onselect',\r\n    onShow: 'onshow',\r\n    onStalled: 'onstalled',\r\n    onStorage: 'onstorage',\r\n    onSubmit: 'onsubmit',\r\n    onSuspend: 'onsuspend',\r\n    onTimeUpdate: 'ontimeupdate',\r\n    onToggle: 'ontoggle',\r\n    onUnload: 'onunload',\r\n    onVolumeChange: 'onvolumechange',\r\n    onWaiting: 'onwaiting',\r\n    onZoom: 'onzoom',\r\n    overlinePosition: 'overline-position',\r\n    overlineThickness: 'overline-thickness',\r\n    paintOrder: 'paint-order',\r\n    panose1: 'panose-1',\r\n    pointerEvents: 'pointer-events',\r\n    referrerPolicy: 'referrerpolicy',\r\n    renderingIntent: 'rendering-intent',\r\n    shapeRendering: 'shape-rendering',\r\n    stopColor: 'stop-color',\r\n    stopOpacity: 'stop-opacity',\r\n    strikethroughPosition: 'strikethrough-position',\r\n    strikethroughThickness: 'strikethrough-thickness',\r\n    strokeDashArray: 'stroke-dasharray',\r\n    strokeDashOffset: 'stroke-dashoffset',\r\n    strokeLineCap: 'stroke-linecap',\r\n    strokeLineJoin: 'stroke-linejoin',\r\n    strokeMiterLimit: 'stroke-miterlimit',\r\n    strokeOpacity: 'stroke-opacity',\r\n    strokeWidth: 'stroke-width',\r\n    tabIndex: 'tabindex',\r\n    textAnchor: 'text-anchor',\r\n    textDecoration: 'text-decoration',\r\n    textRendering: 'text-rendering',\r\n    transformOrigin: 'transform-origin',\r\n    typeOf: 'typeof',\r\n    underlinePosition: 'underline-position',\r\n    underlineThickness: 'underline-thickness',\r\n    unicodeBidi: 'unicode-bidi',\r\n    unicodeRange: 'unicode-range',\r\n    unitsPerEm: 'units-per-em',\r\n    vAlphabetic: 'v-alphabetic',\r\n    vHanging: 'v-hanging',\r\n    vIdeographic: 'v-ideographic',\r\n    vMathematical: 'v-mathematical',\r\n    vectorEffect: 'vector-effect',\r\n    vertAdvY: 'vert-adv-y',\r\n    vertOriginX: 'vert-origin-x',\r\n    vertOriginY: 'vert-origin-y',\r\n    wordSpacing: 'word-spacing',\r\n    writingMode: 'writing-mode',\r\n    xHeight: 'x-height',\r\n    // These were camelcased in Tiny. Now lowercased in SVG 2\r\n    playbackOrder: 'playbackorder',\r\n    timelineBegin: 'timelinebegin'\r\n  },\r\n  properties: {\r\n    about: commaOrSpaceSeparated,\r\n    accentHeight: number,\r\n    accumulate: null,\r\n    additive: null,\r\n    alignmentBaseline: null,\r\n    alphabetic: number,\r\n    amplitude: number,\r\n    arabicForm: null,\r\n    ascent: number,\r\n    attributeName: null,\r\n    attributeType: null,\r\n    azimuth: number,\r\n    bandwidth: null,\r\n    baselineShift: null,\r\n    baseFrequency: null,\r\n    baseProfile: null,\r\n    bbox: null,\r\n    begin: null,\r\n    bias: number,\r\n    by: null,\r\n    calcMode: null,\r\n    capHeight: number,\r\n    className: spaceSeparated,\r\n    clip: null,\r\n    clipPath: null,\r\n    clipPathUnits: null,\r\n    clipRule: null,\r\n    color: null,\r\n    colorInterpolation: null,\r\n    colorInterpolationFilters: null,\r\n    colorProfile: null,\r\n    colorRendering: null,\r\n    content: null,\r\n    contentScriptType: null,\r\n    contentStyleType: null,\r\n    crossOrigin: null,\r\n    cursor: null,\r\n    cx: null,\r\n    cy: null,\r\n    d: null,\r\n    dataType: null,\r\n    defaultAction: null,\r\n    descent: number,\r\n    diffuseConstant: number,\r\n    direction: null,\r\n    display: null,\r\n    dur: null,\r\n    divisor: number,\r\n    dominantBaseline: null,\r\n    download: boolean,\r\n    dx: null,\r\n    dy: null,\r\n    edgeMode: null,\r\n    editable: null,\r\n    elevation: number,\r\n    enableBackground: null,\r\n    end: null,\r\n    event: null,\r\n    exponent: number,\r\n    externalResourcesRequired: null,\r\n    fill: null,\r\n    fillOpacity: number,\r\n    fillRule: null,\r\n    filter: null,\r\n    filterRes: null,\r\n    filterUnits: null,\r\n    floodColor: null,\r\n    floodOpacity: null,\r\n    focusable: null,\r\n    focusHighlight: null,\r\n    fontFamily: null,\r\n    fontSize: null,\r\n    fontSizeAdjust: null,\r\n    fontStretch: null,\r\n    fontStyle: null,\r\n    fontVariant: null,\r\n    fontWeight: null,\r\n    format: null,\r\n    fr: null,\r\n    from: null,\r\n    fx: null,\r\n    fy: null,\r\n    g1: commaSeparated,\r\n    g2: commaSeparated,\r\n    glyphName: commaSeparated,\r\n    glyphOrientationHorizontal: null,\r\n    glyphOrientationVertical: null,\r\n    glyphRef: null,\r\n    gradientTransform: null,\r\n    gradientUnits: null,\r\n    handler: null,\r\n    hanging: number,\r\n    hatchContentUnits: null,\r\n    hatchUnits: null,\r\n    height: null,\r\n    href: null,\r\n    hrefLang: null,\r\n    horizAdvX: number,\r\n    horizOriginX: number,\r\n    horizOriginY: number,\r\n    id: null,\r\n    ideographic: number,\r\n    imageRendering: null,\r\n    initialVisibility: null,\r\n    in: null,\r\n    in2: null,\r\n    intercept: number,\r\n    k: number,\r\n    k1: number,\r\n    k2: number,\r\n    k3: number,\r\n    k4: number,\r\n    kernelMatrix: commaOrSpaceSeparated,\r\n    kernelUnitLength: null,\r\n    keyPoints: null, // SEMI_COLON_SEPARATED\r\n    keySplines: null, // SEMI_COLON_SEPARATED\r\n    keyTimes: null, // SEMI_COLON_SEPARATED\r\n    kerning: null,\r\n    lang: null,\r\n    lengthAdjust: null,\r\n    letterSpacing: null,\r\n    lightingColor: null,\r\n    limitingConeAngle: number,\r\n    local: null,\r\n    markerEnd: null,\r\n    markerMid: null,\r\n    markerStart: null,\r\n    markerHeight: null,\r\n    markerUnits: null,\r\n    markerWidth: null,\r\n    mask: null,\r\n    maskContentUnits: null,\r\n    maskUnits: null,\r\n    mathematical: null,\r\n    max: null,\r\n    media: null,\r\n    mediaCharacterEncoding: null,\r\n    mediaContentEncodings: null,\r\n    mediaSize: number,\r\n    mediaTime: null,\r\n    method: null,\r\n    min: null,\r\n    mode: null,\r\n    name: null,\r\n    navDown: null,\r\n    navDownLeft: null,\r\n    navDownRight: null,\r\n    navLeft: null,\r\n    navNext: null,\r\n    navPrev: null,\r\n    navRight: null,\r\n    navUp: null,\r\n    navUpLeft: null,\r\n    navUpRight: null,\r\n    numOctaves: null,\r\n    observer: null,\r\n    offset: null,\r\n    onAbort: null,\r\n    onActivate: null,\r\n    onAfterPrint: null,\r\n    onBeforePrint: null,\r\n    onBegin: null,\r\n    onCancel: null,\r\n    onCanPlay: null,\r\n    onCanPlayThrough: null,\r\n    onChange: null,\r\n    onClick: null,\r\n    onClose: null,\r\n    onCopy: null,\r\n    onCueChange: null,\r\n    onCut: null,\r\n    onDblClick: null,\r\n    onDrag: null,\r\n    onDragEnd: null,\r\n    onDragEnter: null,\r\n    onDragExit: null,\r\n    onDragLeave: null,\r\n    onDragOver: null,\r\n    onDragStart: null,\r\n    onDrop: null,\r\n    onDurationChange: null,\r\n    onEmptied: null,\r\n    onEnd: null,\r\n    onEnded: null,\r\n    onError: null,\r\n    onFocus: null,\r\n    onFocusIn: null,\r\n    onFocusOut: null,\r\n    onHashChange: null,\r\n    onInput: null,\r\n    onInvalid: null,\r\n    onKeyDown: null,\r\n    onKeyPress: null,\r\n    onKeyUp: null,\r\n    onLoad: null,\r\n    onLoadedData: null,\r\n    onLoadedMetadata: null,\r\n    onLoadStart: null,\r\n    onMessage: null,\r\n    onMouseDown: null,\r\n    onMouseEnter: null,\r\n    onMouseLeave: null,\r\n    onMouseMove: null,\r\n    onMouseOut: null,\r\n    onMouseOver: null,\r\n    onMouseUp: null,\r\n    onMouseWheel: null,\r\n    onOffline: null,\r\n    onOnline: null,\r\n    onPageHide: null,\r\n    onPageShow: null,\r\n    onPaste: null,\r\n    onPause: null,\r\n    onPlay: null,\r\n    onPlaying: null,\r\n    onPopState: null,\r\n    onProgress: null,\r\n    onRateChange: null,\r\n    onRepeat: null,\r\n    onReset: null,\r\n    onResize: null,\r\n    onScroll: null,\r\n    onSeeked: null,\r\n    onSeeking: null,\r\n    onSelect: null,\r\n    onShow: null,\r\n    onStalled: null,\r\n    onStorage: null,\r\n    onSubmit: null,\r\n    onSuspend: null,\r\n    onTimeUpdate: null,\r\n    onToggle: null,\r\n    onUnload: null,\r\n    onVolumeChange: null,\r\n    onWaiting: null,\r\n    onZoom: null,\r\n    opacity: null,\r\n    operator: null,\r\n    order: null,\r\n    orient: null,\r\n    orientation: null,\r\n    origin: null,\r\n    overflow: null,\r\n    overlay: null,\r\n    overlinePosition: number,\r\n    overlineThickness: number,\r\n    paintOrder: null,\r\n    panose1: null,\r\n    path: null,\r\n    pathLength: number,\r\n    patternContentUnits: null,\r\n    patternTransform: null,\r\n    patternUnits: null,\r\n    phase: null,\r\n    ping: spaceSeparated,\r\n    pitch: null,\r\n    playbackOrder: null,\r\n    pointerEvents: null,\r\n    points: null,\r\n    pointsAtX: number,\r\n    pointsAtY: number,\r\n    pointsAtZ: number,\r\n    preserveAlpha: null,\r\n    preserveAspectRatio: null,\r\n    primitiveUnits: null,\r\n    propagate: null,\r\n    property: commaOrSpaceSeparated,\r\n    r: null,\r\n    radius: null,\r\n    referrerPolicy: null,\r\n    refX: null,\r\n    refY: null,\r\n    rel: commaOrSpaceSeparated,\r\n    rev: commaOrSpaceSeparated,\r\n    renderingIntent: null,\r\n    repeatCount: null,\r\n    repeatDur: null,\r\n    requiredExtensions: commaOrSpaceSeparated,\r\n    requiredFeatures: commaOrSpaceSeparated,\r\n    requiredFonts: commaOrSpaceSeparated,\r\n    requiredFormats: commaOrSpaceSeparated,\r\n    resource: null,\r\n    restart: null,\r\n    result: null,\r\n    rotate: null,\r\n    rx: null,\r\n    ry: null,\r\n    scale: null,\r\n    seed: null,\r\n    shapeRendering: null,\r\n    side: null,\r\n    slope: null,\r\n    snapshotTime: null,\r\n    specularConstant: number,\r\n    specularExponent: number,\r\n    spreadMethod: null,\r\n    spacing: null,\r\n    startOffset: null,\r\n    stdDeviation: null,\r\n    stemh: null,\r\n    stemv: null,\r\n    stitchTiles: null,\r\n    stopColor: null,\r\n    stopOpacity: null,\r\n    strikethroughPosition: number,\r\n    strikethroughThickness: number,\r\n    string: null,\r\n    stroke: null,\r\n    strokeDashArray: commaOrSpaceSeparated,\r\n    strokeDashOffset: null,\r\n    strokeLineCap: null,\r\n    strokeLineJoin: null,\r\n    strokeMiterLimit: number,\r\n    strokeOpacity: number,\r\n    strokeWidth: null,\r\n    style: null,\r\n    surfaceScale: number,\r\n    syncBehavior: null,\r\n    syncBehaviorDefault: null,\r\n    syncMaster: null,\r\n    syncTolerance: null,\r\n    syncToleranceDefault: null,\r\n    systemLanguage: commaOrSpaceSeparated,\r\n    tabIndex: number,\r\n    tableValues: null,\r\n    target: null,\r\n    targetX: number,\r\n    targetY: number,\r\n    textAnchor: null,\r\n    textDecoration: null,\r\n    textRendering: null,\r\n    textLength: null,\r\n    timelineBegin: null,\r\n    title: null,\r\n    transformBehavior: null,\r\n    type: null,\r\n    typeOf: commaOrSpaceSeparated,\r\n    to: null,\r\n    transform: null,\r\n    transformOrigin: null,\r\n    u1: null,\r\n    u2: null,\r\n    underlinePosition: number,\r\n    underlineThickness: number,\r\n    unicode: null,\r\n    unicodeBidi: null,\r\n    unicodeRange: null,\r\n    unitsPerEm: number,\r\n    values: null,\r\n    vAlphabetic: number,\r\n    vMathematical: number,\r\n    vectorEffect: null,\r\n    vHanging: number,\r\n    vIdeographic: number,\r\n    version: null,\r\n    vertAdvY: number,\r\n    vertOriginX: number,\r\n    vertOriginY: number,\r\n    viewBox: null,\r\n    viewTarget: null,\r\n    visibility: null,\r\n    width: null,\r\n    widths: null,\r\n    wordSpacing: null,\r\n    writingMode: null,\r\n    x: null,\r\n    x1: null,\r\n    x2: null,\r\n    xChannelSelector: null,\r\n    xHeight: number,\r\n    y: null,\r\n    y1: null,\r\n    y2: null,\r\n    yChannelSelector: null,\r\n    z: null,\r\n    zoomAndPan: null\r\n  },\r\n  space: 'svg',\r\n  transform: caseSensitiveTransform\r\n})\r\n", "import {create} from './util/create.js'\r\n\r\nexport const xlink = create({\r\n  properties: {\r\n    xLinkActuate: null,\r\n    xLinkArcRole: null,\r\n    xLinkHref: null,\r\n    xLinkRole: null,\r\n    xLinkShow: null,\r\n    xLinkTitle: null,\r\n    xLinkType: null\r\n  },\r\n  space: 'xlink',\r\n  transform(_, property) {\r\n    return 'xlink:' + property.slice(5).toLowerCase()\r\n  }\r\n})\r\n", "import {create} from './util/create.js'\r\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\r\n\r\nexport const xmlns = create({\r\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\r\n  properties: {xmlnsXLink: null, xmlns: null},\r\n  space: 'xmlns',\r\n  transform: caseInsensitiveTransform\r\n})\r\n", "import {create} from './util/create.js'\r\n\r\nexport const xml = create({\r\n  properties: {xmlBase: null, xmlLang: null, xmlSpace: null},\r\n  space: 'xml',\r\n  transform(_, property) {\r\n    return 'xml:' + property.slice(3).toLowerCase()\r\n  }\r\n})\r\n", "/**\r\n * @import {Schema} from 'property-information'\r\n */\r\n\r\nimport {DefinedInfo} from './util/defined-info.js'\r\nimport {Info} from './util/info.js'\r\nimport {normalize} from './normalize.js'\r\n\r\nconst cap = /[A-Z]/g\r\nconst dash = /-[a-z]/g\r\nconst valid = /^data[-\\w.:]+$/i\r\n\r\n/**\r\n * Look up info on a property.\r\n *\r\n * In most cases the given `schema` contains info on the property.\r\n * All standard,\r\n * most legacy,\r\n * and some non-standard properties are supported.\r\n * For these cases,\r\n * the returned `Info` has hints about the value of the property.\r\n *\r\n * `name` can also be a valid data attribute or property,\r\n * in which case an `Info` object with the correctly cased `attribute` and\r\n * `property` is returned.\r\n *\r\n * `name` can be an unknown attribute,\r\n * in which case an `Info` object with `attribute` and `property` set to the\r\n * given name is returned.\r\n * It is not recommended to provide unsupported legacy or recently specced\r\n * properties.\r\n *\r\n *\r\n * @param {Schema} schema\r\n *   Schema;\r\n *   either the `html` or `svg` export.\r\n * @param {string} value\r\n *   An attribute-like or property-like name;\r\n *   it will be passed through `normalize` to hopefully find the correct info.\r\n * @returns {Info}\r\n *   Info.\r\n */\r\nexport function find(schema, value) {\r\n  const normal = normalize(value)\r\n  let property = value\r\n  let Type = Info\r\n\r\n  if (normal in schema.normal) {\r\n    return schema.property[schema.normal[normal]]\r\n  }\r\n\r\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\r\n    // Attribute or property.\r\n    if (value.charAt(4) === '-') {\r\n      // Turn it into a property.\r\n      const rest = value.slice(5).replace(dash, camelcase)\r\n      property = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\r\n    } else {\r\n      // Turn it into an attribute.\r\n      const rest = value.slice(4)\r\n\r\n      if (!dash.test(rest)) {\r\n        let dashes = rest.replace(cap, kebab)\r\n\r\n        if (dashes.charAt(0) !== '-') {\r\n          dashes = '-' + dashes\r\n        }\r\n\r\n        value = 'data' + dashes\r\n      }\r\n    }\r\n\r\n    Type = DefinedInfo\r\n  }\r\n\r\n  return new Type(property, value)\r\n}\r\n\r\n/**\r\n * @param {string} $0\r\n *   Value.\r\n * @returns {string}\r\n *   Kebab.\r\n */\r\nfunction kebab($0) {\r\n  return '-' + $0.toLowerCase()\r\n}\r\n\r\n/**\r\n * @param {string} $0\r\n *   Value.\r\n * @returns {string}\r\n *   Camel.\r\n */\r\nfunction camelcase($0) {\r\n  return $0.charAt(1).toUpperCase()\r\n}\r\n", "// Note: types exposed from `index.d.ts`.\r\nimport {merge} from './lib/util/merge.js'\r\nimport {aria} from './lib/aria.js'\r\nimport {html as htmlBase} from './lib/html.js'\r\nimport {svg as svgBase} from './lib/svg.js'\r\nimport {xlink} from './lib/xlink.js'\r\nimport {xmlns} from './lib/xmlns.js'\r\nimport {xml} from './lib/xml.js'\r\n\r\nexport {hastToReact} from './lib/hast-to-react.js'\r\n\r\nexport const html = merge([aria, htmlBase, xlink, xmlns, xml], 'html')\r\n\r\nexport {find} from './lib/find.js'\r\nexport {normalize} from './lib/normalize.js'\r\n\r\nexport const svg = merge([aria, svgBase, xlink, xmlns, xml], 'svg')\r\n", "/**\r\n * @typedef Options\r\n *   Configuration for `stringify`.\r\n * @property {boolean} [padLeft=true]\r\n *   Whether to pad a space before a token.\r\n * @property {boolean} [padRight=false]\r\n *   Whether to pad a space after a token.\r\n */\r\n\r\n/**\r\n * @typedef {Options} StringifyOptions\r\n *   Please use `StringifyOptions` instead.\r\n */\r\n\r\n/**\r\n * Parse comma-separated tokens to an array.\r\n *\r\n * @param {string} value\r\n *   Comma-separated tokens.\r\n * @returns {Array<string>}\r\n *   List of tokens.\r\n */\r\nexport function parse(value) {\r\n  /** @type {Array<string>} */\r\n  const tokens = []\r\n  const input = String(value || '')\r\n  let index = input.indexOf(',')\r\n  let start = 0\r\n  /** @type {boolean} */\r\n  let end = false\r\n\r\n  while (!end) {\r\n    if (index === -1) {\r\n      index = input.length\r\n      end = true\r\n    }\r\n\r\n    const token = input.slice(start, index).trim()\r\n\r\n    if (token || !end) {\r\n      tokens.push(token)\r\n    }\r\n\r\n    start = index + 1\r\n    index = input.indexOf(',', start)\r\n  }\r\n\r\n  return tokens\r\n}\r\n\r\n/**\r\n * Serialize an array of strings or numbers to comma-separated tokens.\r\n *\r\n * @param {Array<string|number>} values\r\n *   List of tokens.\r\n * @param {Options} [options]\r\n *   Configuration for `stringify` (optional).\r\n * @returns {string}\r\n *   Comma-separated tokens.\r\n */\r\nexport function stringify(values, options) {\r\n  const settings = options || {}\r\n\r\n  // Ensure the last empty entry is seen.\r\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\r\n\r\n  return input\r\n    .join(\r\n      (settings.padRight ? ' ' : '') +\r\n        ',' +\r\n        (settings.padLeft === false ? '' : ' ')\r\n    )\r\n    .trim()\r\n}\r\n", "/**\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').Properties} Properties\r\n */\r\n\r\n/**\r\n * @template {string} SimpleSelector\r\n *   Selector type.\r\n * @template {string} DefaultTagName\r\n *   Default tag name.\r\n * @typedef {(\r\n *   SimpleSelector extends ''\r\n *     ? DefaultTagName\r\n *     : SimpleSelector extends `${infer TagName}.${infer Rest}`\r\n *     ? ExtractTagName<TagName, DefaultTagName>\r\n *     : SimpleSelector extends `${infer TagName}#${infer Rest}`\r\n *     ? ExtractTagName<TagName, DefaultTagName>\r\n *     : SimpleSelector extends string\r\n *     ? SimpleSelector\r\n *     : DefaultTagName\r\n * )} ExtractTagName\r\n *   Extract tag name from a simple selector.\r\n */\r\n\r\nconst search = /[#.]/g\r\n\r\n/**\r\n * Create a hast element from a simple CSS selector.\r\n *\r\n * @template {string} Selector\r\n *   Type of selector.\r\n * @template {string} [DefaultTagName='div']\r\n *   Type of default tag name (default: `'div'`).\r\n * @param {Selector | null | undefined} [selector]\r\n *   Simple CSS selector (optional).\r\n *\r\n *   Can contain a tag name (`foo`), classes (`.bar`), and an ID (`#baz`).\r\n *   Multiple classes are allowed.\r\n *   Uses the last ID if multiple IDs are found.\r\n * @param {DefaultTagName | null | undefined} [defaultTagName='div']\r\n *   Tag name to use if `selector` does not specify one (default: `'div'`).\r\n * @returns {Element & {tagName: ExtractTagName<Selector, DefaultTagName>}}\r\n *   Built element.\r\n */\r\nexport function parseSelector(selector, defaultTagName) {\r\n  const value = selector || ''\r\n  /** @type {Properties} */\r\n  const props = {}\r\n  let start = 0\r\n  /** @type {string | undefined} */\r\n  let previous\r\n  /** @type {string | undefined} */\r\n  let tagName\r\n\r\n  while (start < value.length) {\r\n    search.lastIndex = start\r\n    const match = search.exec(value)\r\n    const subvalue = value.slice(start, match ? match.index : value.length)\r\n\r\n    if (subvalue) {\r\n      if (!previous) {\r\n        tagName = subvalue\r\n      } else if (previous === '#') {\r\n        props.id = subvalue\r\n      } else if (Array.isArray(props.className)) {\r\n        props.className.push(subvalue)\r\n      } else {\r\n        props.className = [subvalue]\r\n      }\r\n\r\n      start += subvalue.length\r\n    }\r\n\r\n    if (match) {\r\n      previous = match[0]\r\n      start++\r\n    }\r\n  }\r\n\r\n  return {\r\n    type: 'element',\r\n    // @ts-expect-error: tag name is parsed.\r\n    tagName: tagName || defaultTagName || 'div',\r\n    properties: props,\r\n    children: []\r\n  }\r\n}\r\n", "/**\r\n * Parse space-separated tokens to an array of strings.\r\n *\r\n * @param {string} value\r\n *   Space-separated tokens.\r\n * @returns {Array<string>}\r\n *   List of tokens.\r\n */\r\nexport function parse(value) {\r\n  const input = String(value || '').trim()\r\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\r\n}\r\n\r\n/**\r\n * Serialize an array of strings as space separated-tokens.\r\n *\r\n * @param {Array<string|number>} values\r\n *   List of tokens.\r\n * @returns {string}\r\n *   Space-separated tokens.\r\n */\r\nexport function stringify(values) {\r\n  return values.join(' ').trim()\r\n}\r\n", "/**\r\n * @import {Element, Nodes, RootContent, Root} from 'hast'\r\n * @import {Info, Schema} from 'property-information'\r\n */\r\n\r\n/**\r\n * @typedef {Array<Nodes | PrimitiveChild>} ArrayChildNested\r\n *   List of children (deep).\r\n */\r\n\r\n/**\r\n * @typedef {Array<ArrayChildNested | Nodes | PrimitiveChild>} ArrayChild\r\n *   List of children.\r\n */\r\n\r\n/**\r\n * @typedef {Array<number | string>} ArrayValue\r\n *   List of property values for space- or comma separated values (such as `className`).\r\n */\r\n\r\n/**\r\n * @typedef {ArrayChild | Nodes | PrimitiveChild} Child\r\n *   Acceptable child value.\r\n */\r\n\r\n/**\r\n * @typedef {number | string | null | undefined} PrimitiveChild\r\n *   Primitive children, either ignored (nullish), or turned into text nodes.\r\n */\r\n\r\n/**\r\n * @typedef {boolean | number | string | null | undefined} PrimitiveValue\r\n *   Primitive property value.\r\n */\r\n\r\n/**\r\n * @typedef {Record<string, PropertyValue | Style>} Properties\r\n *   Acceptable value for element properties.\r\n */\r\n\r\n/**\r\n * @typedef {ArrayValue | PrimitiveValue} PropertyValue\r\n *   Primitive value or list value.\r\n */\r\n\r\n/**\r\n * @typedef {Element | Root} Result\r\n *   Result from a `h` (or `s`) call.\r\n */\r\n\r\n/**\r\n * @typedef {number | string} StyleValue\r\n *   Value for a CSS style field.\r\n */\r\n\r\n/**\r\n * @typedef {Record<string, StyleValue>} Style\r\n *   Supported value of a `style` prop.\r\n */\r\n\r\nimport {parse as parseCommas} from 'comma-separated-tokens'\r\nimport {parseSelector} from 'hast-util-parse-selector'\r\nimport {find, normalize} from 'property-information'\r\nimport {parse as parseSpaces} from 'space-separated-tokens'\r\n\r\n/**\r\n * @param {Schema} schema\r\n *   Schema to use.\r\n * @param {string} defaultTagName\r\n *   Default tag name.\r\n * @param {ReadonlyArray<string> | undefined} [caseSensitive]\r\n *   Case-sensitive tag names (default: `undefined`).\r\n * @returns\r\n *   `h`.\r\n */\r\nexport function createH(schema, defaultTagName, caseSensitive) {\r\n  const adjust = caseSensitive ? createAdjustMap(caseSensitive) : undefined\r\n\r\n  /**\r\n   * Hyperscript compatible DSL for creating virtual hast trees.\r\n   *\r\n   * @overload\r\n   * @param {null | undefined} [selector]\r\n   * @param {...Child} children\r\n   * @returns {Root}\r\n   *\r\n   * @overload\r\n   * @param {string} selector\r\n   * @param {Properties} properties\r\n   * @param {...Child} children\r\n   * @returns {Element}\r\n   *\r\n   * @overload\r\n   * @param {string} selector\r\n   * @param {...Child} children\r\n   * @returns {Element}\r\n   *\r\n   * @param {string | null | undefined} [selector]\r\n   *   Selector.\r\n   * @param {Child | Properties | null | undefined} [properties]\r\n   *   Properties (or first child) (default: `undefined`).\r\n   * @param {...Child} children\r\n   *   Children.\r\n   * @returns {Result}\r\n   *   Result.\r\n   */\r\n  function h(selector, properties, ...children) {\r\n    /** @type {Result} */\r\n    let node\r\n\r\n    if (selector === null || selector === undefined) {\r\n      node = {type: 'root', children: []}\r\n      // Properties are not supported for roots.\r\n      const child = /** @type {Child} */ (properties)\r\n      children.unshift(child)\r\n    } else {\r\n      node = parseSelector(selector, defaultTagName)\r\n      // Normalize the name.\r\n      const lower = node.tagName.toLowerCase()\r\n      const adjusted = adjust ? adjust.get(lower) : undefined\r\n      node.tagName = adjusted || lower\r\n\r\n      // Handle properties.\r\n      if (isChild(properties)) {\r\n        children.unshift(properties)\r\n      } else {\r\n        for (const [key, value] of Object.entries(properties)) {\r\n          addProperty(schema, node.properties, key, value)\r\n        }\r\n      }\r\n    }\r\n\r\n    // Handle children.\r\n    for (const child of children) {\r\n      addChild(node.children, child)\r\n    }\r\n\r\n    if (node.type === 'element' && node.tagName === 'template') {\r\n      node.content = {type: 'root', children: node.children}\r\n      node.children = []\r\n    }\r\n\r\n    return node\r\n  }\r\n\r\n  return h\r\n}\r\n\r\n/**\r\n * Check if something is properties or a child.\r\n *\r\n * @param {Child | Properties} value\r\n *   Value to check.\r\n * @returns {value is Child}\r\n *   Whether `value` is definitely a child.\r\n */\r\nfunction isChild(value) {\r\n  // Never properties if not an object.\r\n  if (value === null || typeof value !== 'object' || Array.isArray(value)) {\r\n    return true\r\n  }\r\n\r\n  // Never node without `type`; that’s the main discriminator.\r\n  if (typeof value.type !== 'string') return false\r\n\r\n  // Slower check: never property value if object or array with\r\n  // non-number/strings.\r\n  const record = /** @type {Record<string, unknown>} */ (value)\r\n  const keys = Object.keys(value)\r\n\r\n  for (const key of keys) {\r\n    const value = record[key]\r\n\r\n    if (value && typeof value === 'object') {\r\n      if (!Array.isArray(value)) return true\r\n\r\n      const list = /** @type {ReadonlyArray<unknown>} */ (value)\r\n\r\n      for (const item of list) {\r\n        if (typeof item !== 'number' && typeof item !== 'string') {\r\n          return true\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Also see empty `children` as a node.\r\n  if ('children' in value && Array.isArray(value.children)) {\r\n    return true\r\n  }\r\n\r\n  // Default to properties, someone can always pass an empty object,\r\n  // put `data: {}` in a node,\r\n  // or wrap it in an array.\r\n  return false\r\n}\r\n\r\n/**\r\n * @param {Schema} schema\r\n *   Schema.\r\n * @param {Properties} properties\r\n *   Properties object.\r\n * @param {string} key\r\n *   Property name.\r\n * @param {PropertyValue | Style} value\r\n *   Property value.\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nfunction addProperty(schema, properties, key, value) {\r\n  const info = find(schema, key)\r\n  /** @type {PropertyValue} */\r\n  let result\r\n\r\n  // Ignore nullish and NaN values.\r\n  if (value === null || value === undefined) return\r\n\r\n  if (typeof value === 'number') {\r\n    // Ignore NaN.\r\n    if (Number.isNaN(value)) return\r\n\r\n    result = value\r\n  }\r\n  // Booleans.\r\n  else if (typeof value === 'boolean') {\r\n    result = value\r\n  }\r\n  // Handle list values.\r\n  else if (typeof value === 'string') {\r\n    if (info.spaceSeparated) {\r\n      result = parseSpaces(value)\r\n    } else if (info.commaSeparated) {\r\n      result = parseCommas(value)\r\n    } else if (info.commaOrSpaceSeparated) {\r\n      result = parseSpaces(parseCommas(value).join(' '))\r\n    } else {\r\n      result = parsePrimitive(info, info.property, value)\r\n    }\r\n  } else if (Array.isArray(value)) {\r\n    result = [...value]\r\n  } else {\r\n    result = info.property === 'style' ? style(value) : String(value)\r\n  }\r\n\r\n  if (Array.isArray(result)) {\r\n    /** @type {Array<number | string>} */\r\n    const finalResult = []\r\n\r\n    for (const item of result) {\r\n      // Assume no booleans in array.\r\n      finalResult.push(\r\n        /** @type {number | string} */ (\r\n          parsePrimitive(info, info.property, item)\r\n        )\r\n      )\r\n    }\r\n\r\n    result = finalResult\r\n  }\r\n\r\n  // Class names (which can be added both on the `selector` and here).\r\n  if (info.property === 'className' && Array.isArray(properties.className)) {\r\n    // Assume no booleans in `className`.\r\n    result = properties.className.concat(\r\n      /** @type {Array<number | string> | number | string} */ (result)\r\n    )\r\n  }\r\n\r\n  properties[info.property] = result\r\n}\r\n\r\n/**\r\n * @param {Array<RootContent>} nodes\r\n *   Children.\r\n * @param {Child} value\r\n *   Child.\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nfunction addChild(nodes, value) {\r\n  if (value === null || value === undefined) {\r\n    // Empty.\r\n  } else if (typeof value === 'number' || typeof value === 'string') {\r\n    nodes.push({type: 'text', value: String(value)})\r\n  } else if (Array.isArray(value)) {\r\n    for (const child of value) {\r\n      addChild(nodes, child)\r\n    }\r\n  } else if (typeof value === 'object' && 'type' in value) {\r\n    if (value.type === 'root') {\r\n      addChild(nodes, value.children)\r\n    } else {\r\n      nodes.push(value)\r\n    }\r\n  } else {\r\n    throw new Error('Expected node, nodes, or string, got `' + value + '`')\r\n  }\r\n}\r\n\r\n/**\r\n * Parse a single primitives.\r\n *\r\n * @param {Info} info\r\n *   Property information.\r\n * @param {string} name\r\n *   Property name.\r\n * @param {PrimitiveValue} value\r\n *   Property value.\r\n * @returns {PrimitiveValue}\r\n *   Property value.\r\n */\r\nfunction parsePrimitive(info, name, value) {\r\n  if (typeof value === 'string') {\r\n    if (info.number && value && !Number.isNaN(Number(value))) {\r\n      return Number(value)\r\n    }\r\n\r\n    if (\r\n      (info.boolean || info.overloadedBoolean) &&\r\n      (value === '' || normalize(value) === normalize(name))\r\n    ) {\r\n      return true\r\n    }\r\n  }\r\n\r\n  return value\r\n}\r\n\r\n/**\r\n * Serialize a `style` object as a string.\r\n *\r\n * @param {Style} styles\r\n *   Style object.\r\n * @returns {string}\r\n *   CSS string.\r\n */\r\nfunction style(styles) {\r\n  /** @type {Array<string>} */\r\n  const result = []\r\n\r\n  for (const [key, value] of Object.entries(styles)) {\r\n    result.push([key, value].join(': '))\r\n  }\r\n\r\n  return result.join('; ')\r\n}\r\n\r\n/**\r\n * Create a map to adjust casing.\r\n *\r\n * @param {ReadonlyArray<string>} values\r\n *   List of properly cased keys.\r\n * @returns {Map<string, string>}\r\n *   Map of lowercase keys to uppercase keys.\r\n */\r\nfunction createAdjustMap(values) {\r\n  /** @type {Map<string, string>} */\r\n  const result = new Map()\r\n\r\n  for (const value of values) {\r\n    result.set(value.toLowerCase(), value)\r\n  }\r\n\r\n  return result\r\n}\r\n", "/**\r\n * List of case-sensitive SVG tag names.\r\n *\r\n * @type {ReadonlyArray<string>}\r\n */\r\nexport const svgCaseSensitiveTagNames = [\r\n  'altGlyph',\r\n  'altGlyphDef',\r\n  'altGlyphItem',\r\n  'animateColor',\r\n  'animateMotion',\r\n  'animateTransform',\r\n  'clipPath',\r\n  'feBlend',\r\n  'feColorMatrix',\r\n  'feComponentTransfer',\r\n  'feComposite',\r\n  'feConvolveMatrix',\r\n  'feDiffuseLighting',\r\n  'feDisplacementMap',\r\n  'feDistantLight',\r\n  'feDropShadow',\r\n  'feFlood',\r\n  'feFuncA',\r\n  'feFuncB',\r\n  'feFuncG',\r\n  'feFuncR',\r\n  'feGaussianBlur',\r\n  'feImage',\r\n  'feMerge',\r\n  'feMergeNode',\r\n  'feMorphology',\r\n  'feOffset',\r\n  'fePointLight',\r\n  'feSpecularLighting',\r\n  'feSpotLight',\r\n  'feTile',\r\n  'feTurbulence',\r\n  'foreignObject',\r\n  'glyphRef',\r\n  'linearGradient',\r\n  'radialGradient',\r\n  'solidColor',\r\n  'textArea',\r\n  'textPath'\r\n]\r\n", "// Register the JSX namespace on `h`.\r\n/**\r\n * @typedef {import('./jsx-classic.js').Element} h.JSX.Element\r\n * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} h.JSX.ElementChildrenAttribute\r\n * @typedef {import('./jsx-classic.js').IntrinsicAttributes} h.JSX.IntrinsicAttributes\r\n * @typedef {import('./jsx-classic.js').IntrinsicElements} h.JSX.IntrinsicElements\r\n */\r\n\r\n// Register the JSX namespace on `s`.\r\n/**\r\n * @typedef {import('./jsx-classic.js').Element} s.JSX.Element\r\n * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} s.JSX.ElementChildrenAttribute\r\n * @typedef {import('./jsx-classic.js').IntrinsicAttributes} s.JSX.IntrinsicAttributes\r\n * @typedef {import('./jsx-classic.js').IntrinsicElements} s.JSX.IntrinsicElements\r\n */\r\n\r\nimport {html, svg} from 'property-information'\r\nimport {createH} from './create-h.js'\r\nimport {svgCaseSensitiveTagNames} from './svg-case-sensitive-tag-names.js'\r\n\r\n// Note: this explicit type is needed, otherwise TS creates broken types.\r\n/** @type {ReturnType<createH>} */\r\nexport const h = createH(html, 'div')\r\n\r\n// Note: this explicit type is needed, otherwise TS creates broken types.\r\n/** @type {ReturnType<createH>} */\r\nexport const s = createH(svg, 'g', svgCaseSensitiveTagNames)\r\n", "/**\r\n * List of legacy HTML named character references that don’t need a trailing semicolon.\r\n *\r\n * @type {Array<string>}\r\n */\r\nexport const characterEntitiesLegacy = [\r\n  'AElig',\r\n  'AMP',\r\n  'Aacute',\r\n  'Acirc',\r\n  'Agrave',\r\n  'Aring',\r\n  'Atilde',\r\n  'Auml',\r\n  'COPY',\r\n  'Ccedil',\r\n  'ETH',\r\n  'Eacute',\r\n  'Ecirc',\r\n  'Egrave',\r\n  'Euml',\r\n  'GT',\r\n  'Iacute',\r\n  'Icirc',\r\n  'Igrave',\r\n  'Iuml',\r\n  'LT',\r\n  'Ntilde',\r\n  'Oacute',\r\n  'Ocirc',\r\n  'Ograve',\r\n  'Oslash',\r\n  'Otilde',\r\n  'Ouml',\r\n  'QUOT',\r\n  'REG',\r\n  'THORN',\r\n  'Uacute',\r\n  'Ucirc',\r\n  'Ugrave',\r\n  'Uuml',\r\n  'Yacute',\r\n  'aacute',\r\n  'acirc',\r\n  'acute',\r\n  'aelig',\r\n  'agrave',\r\n  'amp',\r\n  'aring',\r\n  'atilde',\r\n  'auml',\r\n  'brvbar',\r\n  'ccedil',\r\n  'cedil',\r\n  'cent',\r\n  'copy',\r\n  'curren',\r\n  'deg',\r\n  'divide',\r\n  'eacute',\r\n  'ecirc',\r\n  'egrave',\r\n  'eth',\r\n  'euml',\r\n  'frac12',\r\n  'frac14',\r\n  'frac34',\r\n  'gt',\r\n  'iacute',\r\n  'icirc',\r\n  'iexcl',\r\n  'igrave',\r\n  'iquest',\r\n  'iuml',\r\n  'laquo',\r\n  'lt',\r\n  'macr',\r\n  'micro',\r\n  'middot',\r\n  'nbsp',\r\n  'not',\r\n  'ntilde',\r\n  'oacute',\r\n  'ocirc',\r\n  'ograve',\r\n  'ordf',\r\n  'ordm',\r\n  'oslash',\r\n  'otilde',\r\n  'ouml',\r\n  'para',\r\n  'plusmn',\r\n  'pound',\r\n  'quot',\r\n  'raquo',\r\n  'reg',\r\n  'sect',\r\n  'shy',\r\n  'sup1',\r\n  'sup2',\r\n  'sup3',\r\n  'szlig',\r\n  'thorn',\r\n  'times',\r\n  'uacute',\r\n  'ucirc',\r\n  'ugrave',\r\n  'uml',\r\n  'uuml',\r\n  'yacute',\r\n  'yen',\r\n  'yuml'\r\n]\r\n", "/**\r\n * Map of invalid numeric character references to their replacements, according to HTML.\r\n *\r\n * @type {Record<number, string>}\r\n */\r\nexport const characterReferenceInvalid = {\r\n  0: '�',\r\n  128: '€',\r\n  130: '‚',\r\n  131: 'ƒ',\r\n  132: '„',\r\n  133: '…',\r\n  134: '†',\r\n  135: '‡',\r\n  136: 'ˆ',\r\n  137: '‰',\r\n  138: 'Š',\r\n  139: '‹',\r\n  140: 'Œ',\r\n  142: 'Ž',\r\n  145: '‘',\r\n  146: '’',\r\n  147: '“',\r\n  148: '”',\r\n  149: '•',\r\n  150: '–',\r\n  151: '—',\r\n  152: '˜',\r\n  153: '™',\r\n  154: 'š',\r\n  155: '›',\r\n  156: 'œ',\r\n  158: 'ž',\r\n  159: 'Ÿ'\r\n}\r\n", "/**\r\n * Check if the given character code, or the character code at the first\r\n * character, is decimal.\r\n *\r\n * @param {string|number} character\r\n * @returns {boolean} Whether `character` is a decimal\r\n */\r\nexport function isDecimal(character) {\r\n  const code =\r\n    typeof character === 'string' ? character.charCodeAt(0) : character\r\n\r\n  return code >= 48 && code <= 57 /* 0-9 */\r\n}\r\n", "/**\r\n * Check if the given character code, or the character code at the first\r\n * character, is hexadecimal.\r\n *\r\n * @param {string|number} character\r\n * @returns {boolean} Whether `character` is hexadecimal\r\n */\r\nexport function isHexadecimal(character) {\r\n  const code =\r\n    typeof character === 'string' ? character.charCodeAt(0) : character\r\n\r\n  return (\r\n    (code >= 97 /* a */ && code <= 102) /* z */ ||\r\n    (code >= 65 /* A */ && code <= 70) /* Z */ ||\r\n    (code >= 48 /* A */ && code <= 57) /* Z */\r\n  )\r\n}\r\n", "/**\r\n * Check if the given character code, or the character code at the first\r\n * character, is alphabetical.\r\n *\r\n * @param {string|number} character\r\n * @returns {boolean} Whether `character` is alphabetical.\r\n */\r\nexport function isAlphabetical(character) {\r\n  const code =\r\n    typeof character === 'string' ? character.charCodeAt(0) : character\r\n\r\n  return (\r\n    (code >= 97 && code <= 122) /* a-z */ ||\r\n    (code >= 65 && code <= 90) /* A-Z */\r\n  )\r\n}\r\n", "import {isAlphabetical} from 'is-alphabetical'\r\nimport {isDecimal} from 'is-decimal'\r\n\r\n/**\r\n * Check if the given character code, or the character code at the first\r\n * character, is alphanumerical.\r\n *\r\n * @param {string|number} character\r\n * @returns {boolean} Whether `character` is alphanumerical.\r\n */\r\nexport function isAlphanumerical(character) {\r\n  return isAlphabetical(character) || isDecimal(character)\r\n}\r\n", "/// <reference lib=\"dom\" />\r\n\r\n/* global document */\r\n\r\nconst element = document.createElement('i')\r\n\r\n/**\r\n * @param {string} value\r\n * @returns {string | false}\r\n */\r\nexport function decodeNamedCharacterReference(value) {\r\n  const characterReference = '&' + value + ';'\r\n  element.innerHTML = characterReference\r\n  const character = element.textContent\r\n\r\n  // Some named character references do not require the closing semicolon\r\n  // (`&not`, for instance), which leads to situations where parsing the assumed\r\n  // named reference of `&notit;` will result in the string `¬it;`.\r\n  // When we encounter a trailing semicolon after parsing, and the character\r\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\r\n  // matching was not complete.\r\n  if (\r\n    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\r\n    // yield `null`.\r\n    character.charCodeAt(character.length - 1) === 59 /* `;` */ &&\r\n    value !== 'semi'\r\n  ) {\r\n    return false\r\n  }\r\n\r\n  // If the decoded string is equal to the input, the character reference was\r\n  // not valid.\r\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\r\n  // yield `null`.\r\n  return character === characterReference ? false : character\r\n}\r\n", "/**\r\n * @import {Point} from 'unist'\r\n * @import {Options} from '../index.js'\r\n */\r\n\r\nimport {characterEntitiesLegacy} from 'character-entities-legacy'\r\nimport {characterReferenceInvalid} from 'character-reference-invalid'\r\nimport {isDecimal} from 'is-decimal'\r\nimport {isHexadecimal} from 'is-hexadecimal'\r\nimport {isAlphanumerical} from 'is-alphanumerical'\r\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\r\n\r\n// Warning messages.\r\nconst messages = [\r\n  '',\r\n  /* 1: Non terminated (named) */\r\n  'Named character references must be terminated by a semicolon',\r\n  /* 2: Non terminated (numeric) */\r\n  'Numeric character references must be terminated by a semicolon',\r\n  /* 3: Empty (named) */\r\n  'Named character references cannot be empty',\r\n  /* 4: Empty (numeric) */\r\n  'Numeric character references cannot be empty',\r\n  /* 5: Unknown (named) */\r\n  'Named character references must be known',\r\n  /* 6: Disallowed (numeric) */\r\n  'Numeric character references cannot be disallowed',\r\n  /* 7: Prohibited (numeric) */\r\n  'Numeric character references cannot be outside the permissible Unicode range'\r\n]\r\n\r\n/**\r\n * Parse HTML character references.\r\n *\r\n * @param {string} value\r\n * @param {Readonly<Options> | null | undefined} [options]\r\n */\r\nexport function parseEntities(value, options) {\r\n  const settings = options || {}\r\n  const additional =\r\n    typeof settings.additional === 'string'\r\n      ? settings.additional.charCodeAt(0)\r\n      : settings.additional\r\n  /** @type {Array<string>} */\r\n  const result = []\r\n  let index = 0\r\n  let lines = -1\r\n  let queue = ''\r\n  /** @type {Point | undefined} */\r\n  let point\r\n  /** @type {Array<number>|undefined} */\r\n  let indent\r\n\r\n  if (settings.position) {\r\n    if ('start' in settings.position || 'indent' in settings.position) {\r\n      // @ts-expect-error: points don’t have indent.\r\n      indent = settings.position.indent\r\n      // @ts-expect-error: points don’t have indent.\r\n      point = settings.position.start\r\n    } else {\r\n      point = settings.position\r\n    }\r\n  }\r\n\r\n  let line = (point ? point.line : 0) || 1\r\n  let column = (point ? point.column : 0) || 1\r\n\r\n  // Cache the current point.\r\n  let previous = now()\r\n  /** @type {number|undefined} */\r\n  let character\r\n\r\n  // Ensure the algorithm walks over the first character (inclusive).\r\n  index--\r\n\r\n  while (++index <= value.length) {\r\n    // If the previous character was a newline.\r\n    if (character === 10 /* `\\n` */) {\r\n      column = (indent ? indent[lines] : 0) || 1\r\n    }\r\n\r\n    character = value.charCodeAt(index)\r\n\r\n    if (character === 38 /* `&` */) {\r\n      const following = value.charCodeAt(index + 1)\r\n\r\n      // The behavior depends on the identity of the next character.\r\n      if (\r\n        following === 9 /* `\\t` */ ||\r\n        following === 10 /* `\\n` */ ||\r\n        following === 12 /* `\\f` */ ||\r\n        following === 32 /* ` ` */ ||\r\n        following === 38 /* `&` */ ||\r\n        following === 60 /* `<` */ ||\r\n        Number.isNaN(following) ||\r\n        (additional && following === additional)\r\n      ) {\r\n        // Not a character reference.\r\n        // No characters are consumed, and nothing is returned.\r\n        // This is not an error, either.\r\n        queue += String.fromCharCode(character)\r\n        column++\r\n        continue\r\n      }\r\n\r\n      const start = index + 1\r\n      let begin = start\r\n      let end = start\r\n      /** @type {string} */\r\n      let type\r\n\r\n      if (following === 35 /* `#` */) {\r\n        // Numerical reference.\r\n        end = ++begin\r\n\r\n        // The behavior further depends on the next character.\r\n        const following = value.charCodeAt(end)\r\n\r\n        if (following === 88 /* `X` */ || following === 120 /* `x` */) {\r\n          // ASCII hexadecimal digits.\r\n          type = 'hexadecimal'\r\n          end = ++begin\r\n        } else {\r\n          // ASCII decimal digits.\r\n          type = 'decimal'\r\n        }\r\n      } else {\r\n        // Named reference.\r\n        type = 'named'\r\n      }\r\n\r\n      let characterReferenceCharacters = ''\r\n      let characterReference = ''\r\n      let characters = ''\r\n      // Each type of character reference accepts different characters.\r\n      // This test is used to detect whether a reference has ended (as the semicolon\r\n      // is not strictly needed).\r\n      const test =\r\n        type === 'named'\r\n          ? isAlphanumerical\r\n          : type === 'decimal'\r\n            ? isDecimal\r\n            : isHexadecimal\r\n\r\n      end--\r\n\r\n      while (++end <= value.length) {\r\n        const following = value.charCodeAt(end)\r\n\r\n        if (!test(following)) {\r\n          break\r\n        }\r\n\r\n        characters += String.fromCharCode(following)\r\n\r\n        // Check if we can match a legacy named reference.\r\n        // If so, we cache that as the last viable named reference.\r\n        // This ensures we do not need to walk backwards later.\r\n        if (type === 'named' && characterEntitiesLegacy.includes(characters)) {\r\n          characterReferenceCharacters = characters\r\n          // @ts-expect-error: always able to decode.\r\n          characterReference = decodeNamedCharacterReference(characters)\r\n        }\r\n      }\r\n\r\n      let terminated = value.charCodeAt(end) === 59 /* `;` */\r\n\r\n      if (terminated) {\r\n        end++\r\n\r\n        const namedReference =\r\n          type === 'named' ? decodeNamedCharacterReference(characters) : false\r\n\r\n        if (namedReference) {\r\n          characterReferenceCharacters = characters\r\n          characterReference = namedReference\r\n        }\r\n      }\r\n\r\n      let diff = 1 + end - start\r\n      let reference = ''\r\n\r\n      if (!terminated && settings.nonTerminated === false) {\r\n        // Empty.\r\n      } else if (!characters) {\r\n        // An empty (possible) reference is valid, unless it’s numeric (thus an\r\n        // ampersand followed by an octothorp).\r\n        if (type !== 'named') {\r\n          warning(4 /* Empty (numeric) */, diff)\r\n        }\r\n      } else if (type === 'named') {\r\n        // An ampersand followed by anything unknown, and not terminated, is\r\n        // invalid.\r\n        if (terminated && !characterReference) {\r\n          warning(5 /* Unknown (named) */, 1)\r\n        } else {\r\n          // If there’s something after an named reference which is not known,\r\n          // cap the reference.\r\n          if (characterReferenceCharacters !== characters) {\r\n            end = begin + characterReferenceCharacters.length\r\n            diff = 1 + end - begin\r\n            terminated = false\r\n          }\r\n\r\n          // If the reference is not terminated, warn.\r\n          if (!terminated) {\r\n            const reason = characterReferenceCharacters\r\n              ? 1 /* Non terminated (named) */\r\n              : 3 /* Empty (named) */\r\n\r\n            if (settings.attribute) {\r\n              const following = value.charCodeAt(end)\r\n\r\n              if (following === 61 /* `=` */) {\r\n                warning(reason, diff)\r\n                characterReference = ''\r\n              } else if (isAlphanumerical(following)) {\r\n                characterReference = ''\r\n              } else {\r\n                warning(reason, diff)\r\n              }\r\n            } else {\r\n              warning(reason, diff)\r\n            }\r\n          }\r\n        }\r\n\r\n        reference = characterReference\r\n      } else {\r\n        if (!terminated) {\r\n          // All nonterminated numeric references are not rendered, and emit a\r\n          // warning.\r\n          warning(2 /* Non terminated (numeric) */, diff)\r\n        }\r\n\r\n        // When terminated and numerical, parse as either hexadecimal or\r\n        // decimal.\r\n        let referenceCode = Number.parseInt(\r\n          characters,\r\n          type === 'hexadecimal' ? 16 : 10\r\n        )\r\n\r\n        // Emit a warning when the parsed number is prohibited, and replace with\r\n        // replacement character.\r\n        if (prohibited(referenceCode)) {\r\n          warning(7 /* Prohibited (numeric) */, diff)\r\n          reference = String.fromCharCode(65533 /* `�` */)\r\n        } else if (referenceCode in characterReferenceInvalid) {\r\n          // Emit a warning when the parsed number is disallowed, and replace by\r\n          // an alternative.\r\n          warning(6 /* Disallowed (numeric) */, diff)\r\n          reference = characterReferenceInvalid[referenceCode]\r\n        } else {\r\n          // Parse the number.\r\n          let output = ''\r\n\r\n          // Emit a warning when the parsed number should not be used.\r\n          if (disallowed(referenceCode)) {\r\n            warning(6 /* Disallowed (numeric) */, diff)\r\n          }\r\n\r\n          // Serialize the number.\r\n          if (referenceCode > 0xffff) {\r\n            referenceCode -= 0x10000\r\n            output += String.fromCharCode(\r\n              (referenceCode >>> (10 & 0x3ff)) | 0xd800\r\n            )\r\n            referenceCode = 0xdc00 | (referenceCode & 0x3ff)\r\n          }\r\n\r\n          reference = output + String.fromCharCode(referenceCode)\r\n        }\r\n      }\r\n\r\n      // Found it!\r\n      // First eat the queued characters as normal text, then eat a reference.\r\n      if (reference) {\r\n        flush()\r\n\r\n        previous = now()\r\n        index = end - 1\r\n        column += end - start + 1\r\n        result.push(reference)\r\n        const next = now()\r\n        next.offset++\r\n\r\n        if (settings.reference) {\r\n          settings.reference.call(\r\n            settings.referenceContext || undefined,\r\n            reference,\r\n            {start: previous, end: next},\r\n            value.slice(start - 1, end)\r\n          )\r\n        }\r\n\r\n        previous = next\r\n      } else {\r\n        // If we could not find a reference, queue the checked characters (as\r\n        // normal characters), and move the pointer to their end.\r\n        // This is possible because we can be certain neither newlines nor\r\n        // ampersands are included.\r\n        characters = value.slice(start - 1, end)\r\n        queue += characters\r\n        column += characters.length\r\n        index = end - 1\r\n      }\r\n    } else {\r\n      // Handle anything other than an ampersand, including newlines and EOF.\r\n      if (character === 10 /* `\\n` */) {\r\n        line++\r\n        lines++\r\n        column = 0\r\n      }\r\n\r\n      if (Number.isNaN(character)) {\r\n        flush()\r\n      } else {\r\n        queue += String.fromCharCode(character)\r\n        column++\r\n      }\r\n    }\r\n  }\r\n\r\n  // Return the reduced nodes.\r\n  return result.join('')\r\n\r\n  // Get current position.\r\n  function now() {\r\n    return {\r\n      line,\r\n      column,\r\n      offset: index + ((point ? point.offset : 0) || 0)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle the warning.\r\n   *\r\n   * @param {1|2|3|4|5|6|7} code\r\n   * @param {number} offset\r\n   */\r\n  function warning(code, offset) {\r\n    /** @type {ReturnType<now>} */\r\n    let position\r\n\r\n    if (settings.warning) {\r\n      position = now()\r\n      position.column += offset\r\n      position.offset += offset\r\n\r\n      settings.warning.call(\r\n        settings.warningContext || undefined,\r\n        messages[code],\r\n        position,\r\n        code\r\n      )\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Flush `queue` (normal text).\r\n   * Macro invoked before each reference and at the end of `value`.\r\n   * Does nothing when `queue` is empty.\r\n   */\r\n  function flush() {\r\n    if (queue) {\r\n      result.push(queue)\r\n\r\n      if (settings.text) {\r\n        settings.text.call(settings.textContext || undefined, queue, {\r\n          start: previous,\r\n          end: now()\r\n        })\r\n      }\r\n\r\n      queue = ''\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Check if `character` is outside the permissible unicode range.\r\n *\r\n * @param {number} code\r\n * @returns {boolean}\r\n */\r\nfunction prohibited(code) {\r\n  return (code >= 0xd800 && code <= 0xdfff) || code > 0x10ffff\r\n}\r\n\r\n/**\r\n * Check if `character` is disallowed.\r\n *\r\n * @param {number} code\r\n * @returns {boolean}\r\n */\r\nfunction disallowed(code) {\r\n  return (\r\n    (code >= 0x0001 && code <= 0x0008) ||\r\n    code === 0x000b ||\r\n    (code >= 0x000d && code <= 0x001f) ||\r\n    (code >= 0x007f && code <= 0x009f) ||\r\n    (code >= 0xfdd0 && code <= 0xfdef) ||\r\n    (code & 0xffff) === 0xffff ||\r\n    (code & 0xffff) === 0xfffe\r\n  )\r\n}\r\n", "// @ts-nocheck\r\n\r\n// This is a slimmed down version of `prism-core.js`, to remove globals,\r\n// document, workers, `util.encode`, `Token.stringify`\r\n\r\n// Private helper vars\r\nvar lang = /(?:^|\\s)lang(?:uage)?-([\\w-]+)(?=\\s|$)/i\r\nvar uniqueId = 0\r\n\r\n// The grammar object for plaintext\r\nvar plainTextGrammar = {}\r\n\r\nvar _ = {\r\n  /**\r\n   * A namespace for utility methods.\r\n   *\r\n   * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\r\n   * change or disappear at any time.\r\n   *\r\n   * @namespace\r\n   * @memberof Prism\r\n   */\r\n  util: {\r\n    /**\r\n     * Returns the name of the type of the given value.\r\n     *\r\n     * @param {any} o\r\n     * @returns {string}\r\n     * @example\r\n     * type(null)      === 'Null'\r\n     * type(undefined) === 'Undefined'\r\n     * type(123)       === 'Number'\r\n     * type('foo')     === 'String'\r\n     * type(true)      === 'Boolean'\r\n     * type([1, 2])    === 'Array'\r\n     * type({})        === 'Object'\r\n     * type(String)    === 'Function'\r\n     * type(/abc+/)    === 'RegExp'\r\n     */\r\n    type: function (o) {\r\n      return Object.prototype.toString.call(o).slice(8, -1)\r\n    },\r\n\r\n    /**\r\n     * Returns a unique number for the given object. Later calls will still return the same number.\r\n     *\r\n     * @param {Object} obj\r\n     * @returns {number}\r\n     */\r\n    objId: function (obj) {\r\n      if (!obj['__id']) {\r\n        Object.defineProperty(obj, '__id', {value: ++uniqueId})\r\n      }\r\n      return obj['__id']\r\n    },\r\n\r\n    /**\r\n     * Creates a deep clone of the given object.\r\n     *\r\n     * The main intended use of this function is to clone language definitions.\r\n     *\r\n     * @param {T} o\r\n     * @param {Record<number, any>} [visited]\r\n     * @returns {T}\r\n     * @template T\r\n     */\r\n    clone: function deepClone(o, visited) {\r\n      visited = visited || {}\r\n\r\n      var clone\r\n      var id\r\n      switch (_.util.type(o)) {\r\n        case 'Object':\r\n          id = _.util.objId(o)\r\n          if (visited[id]) {\r\n            return visited[id]\r\n          }\r\n          clone = /** @type {Record<string, any>} */ ({})\r\n          visited[id] = clone\r\n\r\n          for (var key in o) {\r\n            if (o.hasOwnProperty(key)) {\r\n              clone[key] = deepClone(o[key], visited)\r\n            }\r\n          }\r\n\r\n          return /** @type {any} */ (clone)\r\n\r\n        case 'Array':\r\n          id = _.util.objId(o)\r\n          if (visited[id]) {\r\n            return visited[id]\r\n          }\r\n          clone = []\r\n          visited[id] = clone\r\n\r\n          ;/** @type {Array} */ (/** @type {any} */ (o)).forEach(\r\n            function (v, i) {\r\n              clone[i] = deepClone(v, visited)\r\n            }\r\n          )\r\n\r\n          return /** @type {any} */ (clone)\r\n\r\n        default:\r\n          return o\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\r\n   *\r\n   * @namespace\r\n   * @memberof Prism\r\n   * @public\r\n   */\r\n  languages: {\r\n    /**\r\n     * The grammar for plain, unformatted text.\r\n     */\r\n    plain: plainTextGrammar,\r\n    plaintext: plainTextGrammar,\r\n    text: plainTextGrammar,\r\n    txt: plainTextGrammar,\r\n\r\n    /**\r\n     * Creates a deep copy of the language with the given id and appends the given tokens.\r\n     *\r\n     * If a token in `redef` also appears in the copied language, then the existing token in the copied language\r\n     * will be overwritten at its original position.\r\n     *\r\n     * ## Best practices\r\n     *\r\n     * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\r\n     * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\r\n     * understand the language definition because, normally, the order of tokens matters in Prism grammars.\r\n     *\r\n     * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\r\n     * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\r\n     *\r\n     * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\r\n     * @param {Grammar} redef The new tokens to append.\r\n     * @returns {Grammar} The new language created.\r\n     * @public\r\n     * @example\r\n     * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\r\n     *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\r\n     *     // at its original position\r\n     *     'comment': { ... },\r\n     *     // CSS doesn't have a 'color' token, so this token will be appended\r\n     *     'color': /\\b(?:red|green|blue)\\b/\r\n     * });\r\n     */\r\n    extend: function (id, redef) {\r\n      var lang = _.util.clone(_.languages[id])\r\n\r\n      for (var key in redef) {\r\n        lang[key] = redef[key]\r\n      }\r\n\r\n      return lang\r\n    },\r\n\r\n    /**\r\n     * Inserts tokens _before_ another token in a language definition or any other grammar.\r\n     *\r\n     * ## Usage\r\n     *\r\n     * This helper method makes it easy to modify existing languages. For example, the CSS language definition\r\n     * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\r\n     * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\r\n     * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\r\n     * this:\r\n     *\r\n     * ```js\r\n     * Prism.languages.markup.style = {\r\n     *     // token\r\n     * };\r\n     * ```\r\n     *\r\n     * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\r\n     * before existing tokens. For the CSS example above, you would use it like this:\r\n     *\r\n     * ```js\r\n     * Prism.languages.insertBefore('markup', 'cdata', {\r\n     *     'style': {\r\n     *         // token\r\n     *     }\r\n     * });\r\n     * ```\r\n     *\r\n     * ## Special cases\r\n     *\r\n     * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\r\n     * will be ignored.\r\n     *\r\n     * This behavior can be used to insert tokens after `before`:\r\n     *\r\n     * ```js\r\n     * Prism.languages.insertBefore('markup', 'comment', {\r\n     *     'comment': Prism.languages.markup.comment,\r\n     *     // tokens after 'comment'\r\n     * });\r\n     * ```\r\n     *\r\n     * ## Limitations\r\n     *\r\n     * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\r\n     * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\r\n     * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\r\n     * deleting properties which is necessary to insert at arbitrary positions.\r\n     *\r\n     * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\r\n     * Instead, it will create a new object and replace all references to the target object with the new one. This\r\n     * can be done without temporarily deleting properties, so the iteration order is well-defined.\r\n     *\r\n     * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\r\n     * you hold the target object in a variable, then the value of the variable will not change.\r\n     *\r\n     * ```js\r\n     * var oldMarkup = Prism.languages.markup;\r\n     * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\r\n     *\r\n     * assert(oldMarkup !== Prism.languages.markup);\r\n     * assert(newMarkup === Prism.languages.markup);\r\n     * ```\r\n     *\r\n     * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\r\n     * object to be modified.\r\n     * @param {string} before The key to insert before.\r\n     * @param {Grammar} insert An object containing the key-value pairs to be inserted.\r\n     * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\r\n     * object to be modified.\r\n     *\r\n     * Defaults to `Prism.languages`.\r\n     * @returns {Grammar} The new grammar object.\r\n     * @public\r\n     */\r\n    insertBefore: function (inside, before, insert, root) {\r\n      root = root || /** @type {any} */ (_.languages)\r\n      var grammar = root[inside]\r\n      /** @type {Grammar} */\r\n      var ret = {}\r\n\r\n      for (var token in grammar) {\r\n        if (grammar.hasOwnProperty(token)) {\r\n          if (token == before) {\r\n            for (var newToken in insert) {\r\n              if (insert.hasOwnProperty(newToken)) {\r\n                ret[newToken] = insert[newToken]\r\n              }\r\n            }\r\n          }\r\n\r\n          // Do not insert token which also occur in insert. See #1525\r\n          if (!insert.hasOwnProperty(token)) {\r\n            ret[token] = grammar[token]\r\n          }\r\n        }\r\n      }\r\n\r\n      var old = root[inside]\r\n      root[inside] = ret\r\n\r\n      // Update references in other language definitions\r\n      _.languages.DFS(_.languages, function (key, value) {\r\n        if (value === old && key != inside) {\r\n          this[key] = ret\r\n        }\r\n      })\r\n\r\n      return ret\r\n    },\r\n\r\n    // Traverse a language definition with Depth First Search\r\n    DFS: function DFS(o, callback, type, visited) {\r\n      visited = visited || {}\r\n\r\n      var objId = _.util.objId\r\n\r\n      for (var i in o) {\r\n        if (o.hasOwnProperty(i)) {\r\n          callback.call(o, i, o[i], type || i)\r\n\r\n          var property = o[i]\r\n          var propertyType = _.util.type(property)\r\n\r\n          if (propertyType === 'Object' && !visited[objId(property)]) {\r\n            visited[objId(property)] = true\r\n            DFS(property, callback, null, visited)\r\n          } else if (propertyType === 'Array' && !visited[objId(property)]) {\r\n            visited[objId(property)] = true\r\n            DFS(property, callback, i, visited)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  plugins: {},\r\n\r\n  /**\r\n   * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\r\n   * and the language definitions to use, and returns a string with the HTML produced.\r\n   *\r\n   * The following hooks will be run:\r\n   * 1. `before-tokenize`\r\n   * 2. `after-tokenize`\r\n   * 3. `wrap`: On each {@link Token}.\r\n   *\r\n   * @param {string} text A string with the code to be highlighted.\r\n   * @param {Grammar} grammar An object containing the tokens to use.\r\n   *\r\n   * Usually a language definition like `Prism.languages.markup`.\r\n   * @param {string} language The name of the language definition passed to `grammar`.\r\n   * @returns {string} The highlighted HTML.\r\n   * @memberof Prism\r\n   * @public\r\n   * @example\r\n   * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\r\n   */\r\n  highlight: function (text, grammar, language) {\r\n    var env = {\r\n      code: text,\r\n      grammar: grammar,\r\n      language: language\r\n    }\r\n    _.hooks.run('before-tokenize', env)\r\n    if (!env.grammar) {\r\n      throw new Error('The language \"' + env.language + '\" has no grammar.')\r\n    }\r\n    env.tokens = _.tokenize(env.code, env.grammar)\r\n    _.hooks.run('after-tokenize', env)\r\n    return Token.stringify(_.util.encode(env.tokens), env.language)\r\n  },\r\n\r\n  /**\r\n   * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\r\n   * and the language definitions to use, and returns an array with the tokenized code.\r\n   *\r\n   * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\r\n   *\r\n   * This method could be useful in other contexts as well, as a very crude parser.\r\n   *\r\n   * @param {string} text A string with the code to be highlighted.\r\n   * @param {Grammar} grammar An object containing the tokens to use.\r\n   *\r\n   * Usually a language definition like `Prism.languages.markup`.\r\n   * @returns {TokenStream} An array of strings and tokens, a token stream.\r\n   * @memberof Prism\r\n   * @public\r\n   * @example\r\n   * let code = `var foo = 0;`;\r\n   * let tokens = Prism.tokenize(code, Prism.languages.javascript);\r\n   * tokens.forEach(token => {\r\n   *     if (token instanceof Prism.Token && token.type === 'number') {\r\n   *         console.log(`Found numeric literal: ${token.content}`);\r\n   *     }\r\n   * });\r\n   */\r\n  tokenize: function (text, grammar) {\r\n    var rest = grammar.rest\r\n    if (rest) {\r\n      for (var token in rest) {\r\n        grammar[token] = rest[token]\r\n      }\r\n\r\n      delete grammar.rest\r\n    }\r\n\r\n    var tokenList = new LinkedList()\r\n    addAfter(tokenList, tokenList.head, text)\r\n\r\n    matchGrammar(text, tokenList, grammar, tokenList.head, 0)\r\n\r\n    return toArray(tokenList)\r\n  },\r\n\r\n  /**\r\n   * @namespace\r\n   * @memberof Prism\r\n   * @public\r\n   */\r\n  hooks: {\r\n    all: {},\r\n\r\n    /**\r\n     * Adds the given callback to the list of callbacks for the given hook.\r\n     *\r\n     * The callback will be invoked when the hook it is registered for is run.\r\n     * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\r\n     *\r\n     * One callback function can be registered to multiple hooks and the same hook multiple times.\r\n     *\r\n     * @param {string} name The name of the hook.\r\n     * @param {HookCallback} callback The callback function which is given environment variables.\r\n     * @public\r\n     */\r\n    add: function (name, callback) {\r\n      var hooks = _.hooks.all\r\n\r\n      hooks[name] = hooks[name] || []\r\n\r\n      hooks[name].push(callback)\r\n    },\r\n\r\n    /**\r\n     * Runs a hook invoking all registered callbacks with the given environment variables.\r\n     *\r\n     * Callbacks will be invoked synchronously and in the order in which they were registered.\r\n     *\r\n     * @param {string} name The name of the hook.\r\n     * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\r\n     * @public\r\n     */\r\n    run: function (name, env) {\r\n      var callbacks = _.hooks.all[name]\r\n\r\n      if (!callbacks || !callbacks.length) {\r\n        return\r\n      }\r\n\r\n      for (var i = 0, callback; (callback = callbacks[i++]); ) {\r\n        callback(env)\r\n      }\r\n    }\r\n  },\r\n\r\n  Token: Token\r\n}\r\n\r\n// Typescript note:\r\n// The following can be used to import the Token type in JSDoc:\r\n//\r\n//   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\r\n\r\n/**\r\n * Creates a new token.\r\n *\r\n * @param {string} type See {@link Token#type type}\r\n * @param {string | TokenStream} content See {@link Token#content content}\r\n * @param {string|string[]} [alias] The alias(es) of the token.\r\n * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\r\n * @class\r\n * @global\r\n * @public\r\n */\r\nfunction Token(type, content, alias, matchedStr) {\r\n  /**\r\n   * The type of the token.\r\n   *\r\n   * This is usually the key of a pattern in a {@link Grammar}.\r\n   *\r\n   * @type {string}\r\n   * @see GrammarToken\r\n   * @public\r\n   */\r\n  this.type = type\r\n  /**\r\n   * The strings or tokens contained by this token.\r\n   *\r\n   * This will be a token stream if the pattern matched also defined an `inside` grammar.\r\n   *\r\n   * @type {string | TokenStream}\r\n   * @public\r\n   */\r\n  this.content = content\r\n  /**\r\n   * The alias(es) of the token.\r\n   *\r\n   * @type {string|string[]}\r\n   * @see GrammarToken\r\n   * @public\r\n   */\r\n  this.alias = alias\r\n  // Copy of the full string this token was created from\r\n  this.length = (matchedStr || '').length | 0\r\n}\r\n\r\n/**\r\n * A token stream is an array of strings and {@link Token Token} objects.\r\n *\r\n * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\r\n * them.\r\n *\r\n * 1. No adjacent strings.\r\n * 2. No empty strings.\r\n *\r\n *    The only exception here is the token stream that only contains the empty string and nothing else.\r\n *\r\n * @typedef {Array<string | Token>} TokenStream\r\n * @global\r\n * @public\r\n */\r\n\r\n/**\r\n * @param {RegExp} pattern\r\n * @param {number} pos\r\n * @param {string} text\r\n * @param {boolean} lookbehind\r\n * @returns {RegExpExecArray | null}\r\n */\r\nfunction matchPattern(pattern, pos, text, lookbehind) {\r\n  pattern.lastIndex = pos\r\n  var match = pattern.exec(text)\r\n  if (match && lookbehind && match[1]) {\r\n    // change the match to remove the text matched by the Prism lookbehind group\r\n    var lookbehindLength = match[1].length\r\n    match.index += lookbehindLength\r\n    match[0] = match[0].slice(lookbehindLength)\r\n  }\r\n  return match\r\n}\r\n\r\n/**\r\n * @param {string} text\r\n * @param {LinkedList<string | Token>} tokenList\r\n * @param {any} grammar\r\n * @param {LinkedListNode<string | Token>} startNode\r\n * @param {number} startPos\r\n * @param {RematchOptions} [rematch]\r\n * @returns {void}\r\n * @private\r\n *\r\n * @typedef RematchOptions\r\n * @property {string} cause\r\n * @property {number} reach\r\n */\r\nfunction matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\r\n  for (var token in grammar) {\r\n    if (!grammar.hasOwnProperty(token) || !grammar[token]) {\r\n      continue\r\n    }\r\n\r\n    var patterns = grammar[token]\r\n    patterns = Array.isArray(patterns) ? patterns : [patterns]\r\n\r\n    for (var j = 0; j < patterns.length; ++j) {\r\n      if (rematch && rematch.cause == token + ',' + j) {\r\n        return\r\n      }\r\n\r\n      var patternObj = patterns[j]\r\n      var inside = patternObj.inside\r\n      var lookbehind = !!patternObj.lookbehind\r\n      var greedy = !!patternObj.greedy\r\n      var alias = patternObj.alias\r\n\r\n      if (greedy && !patternObj.pattern.global) {\r\n        // Without the global flag, lastIndex won't work\r\n        var flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0]\r\n        patternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g')\r\n      }\r\n\r\n      /** @type {RegExp} */\r\n      var pattern = patternObj.pattern || patternObj\r\n\r\n      for (\r\n        // iterate the token list and keep track of the current token/string position\r\n        var currentNode = startNode.next, pos = startPos;\r\n        currentNode !== tokenList.tail;\r\n        pos += currentNode.value.length, currentNode = currentNode.next\r\n      ) {\r\n        if (rematch && pos >= rematch.reach) {\r\n          break\r\n        }\r\n\r\n        var str = currentNode.value\r\n\r\n        if (tokenList.length > text.length) {\r\n          // Something went terribly wrong, ABORT, ABORT!\r\n          return\r\n        }\r\n\r\n        if (str instanceof Token) {\r\n          continue\r\n        }\r\n\r\n        var removeCount = 1 // this is the to parameter of removeBetween\r\n        var match\r\n\r\n        if (greedy) {\r\n          match = matchPattern(pattern, pos, text, lookbehind)\r\n          if (!match || match.index >= text.length) {\r\n            break\r\n          }\r\n\r\n          var from = match.index\r\n          var to = match.index + match[0].length\r\n          var p = pos\r\n\r\n          // find the node that contains the match\r\n          p += currentNode.value.length\r\n          while (from >= p) {\r\n            currentNode = currentNode.next\r\n            p += currentNode.value.length\r\n          }\r\n          // adjust pos (and p)\r\n          p -= currentNode.value.length\r\n          pos = p\r\n\r\n          // the current node is a Token, then the match starts inside another Token, which is invalid\r\n          if (currentNode.value instanceof Token) {\r\n            continue\r\n          }\r\n\r\n          // find the last node which is affected by this match\r\n          for (\r\n            var k = currentNode;\r\n            k !== tokenList.tail && (p < to || typeof k.value === 'string');\r\n            k = k.next\r\n          ) {\r\n            removeCount++\r\n            p += k.value.length\r\n          }\r\n          removeCount--\r\n\r\n          // replace with the new match\r\n          str = text.slice(pos, p)\r\n          match.index -= pos\r\n        } else {\r\n          match = matchPattern(pattern, 0, str, lookbehind)\r\n          if (!match) {\r\n            continue\r\n          }\r\n        }\r\n\r\n        // eslint-disable-next-line no-redeclare\r\n        var from = match.index\r\n        var matchStr = match[0]\r\n        var before = str.slice(0, from)\r\n        var after = str.slice(from + matchStr.length)\r\n\r\n        var reach = pos + str.length\r\n        if (rematch && reach > rematch.reach) {\r\n          rematch.reach = reach\r\n        }\r\n\r\n        var removeFrom = currentNode.prev\r\n\r\n        if (before) {\r\n          removeFrom = addAfter(tokenList, removeFrom, before)\r\n          pos += before.length\r\n        }\r\n\r\n        removeRange(tokenList, removeFrom, removeCount)\r\n\r\n        var wrapped = new Token(\r\n          token,\r\n          inside ? _.tokenize(matchStr, inside) : matchStr,\r\n          alias,\r\n          matchStr\r\n        )\r\n        currentNode = addAfter(tokenList, removeFrom, wrapped)\r\n\r\n        if (after) {\r\n          addAfter(tokenList, currentNode, after)\r\n        }\r\n\r\n        if (removeCount > 1) {\r\n          // at least one Token object was removed, so we have to do some rematching\r\n          // this can only happen if the current pattern is greedy\r\n\r\n          /** @type {RematchOptions} */\r\n          var nestedRematch = {\r\n            cause: token + ',' + j,\r\n            reach: reach\r\n          }\r\n          matchGrammar(\r\n            text,\r\n            tokenList,\r\n            grammar,\r\n            currentNode.prev,\r\n            pos,\r\n            nestedRematch\r\n          )\r\n\r\n          // the reach might have been extended because of the rematching\r\n          if (rematch && nestedRematch.reach > rematch.reach) {\r\n            rematch.reach = nestedRematch.reach\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @typedef LinkedListNode\r\n * @property {T} value\r\n * @property {LinkedListNode<T> | null} prev The previous node.\r\n * @property {LinkedListNode<T> | null} next The next node.\r\n * @template T\r\n * @private\r\n */\r\n\r\n/**\r\n * @template T\r\n * @private\r\n */\r\nfunction LinkedList() {\r\n  /** @type {LinkedListNode<T>} */\r\n  var head = {value: null, prev: null, next: null}\r\n  /** @type {LinkedListNode<T>} */\r\n  var tail = {value: null, prev: head, next: null}\r\n  head.next = tail\r\n\r\n  /** @type {LinkedListNode<T>} */\r\n  this.head = head\r\n  /** @type {LinkedListNode<T>} */\r\n  this.tail = tail\r\n  this.length = 0\r\n}\r\n\r\n/**\r\n * Adds a new node with the given value to the list.\r\n *\r\n * @param {LinkedList<T>} list\r\n * @param {LinkedListNode<T>} node\r\n * @param {T} value\r\n * @returns {LinkedListNode<T>} The added node.\r\n * @template T\r\n */\r\nfunction addAfter(list, node, value) {\r\n  // assumes that node != list.tail && values.length >= 0\r\n  var next = node.next\r\n\r\n  var newNode = {value: value, prev: node, next: next}\r\n  node.next = newNode\r\n  next.prev = newNode\r\n  list.length++\r\n\r\n  return newNode\r\n}\r\n/**\r\n * Removes `count` nodes after the given node. The given node will not be removed.\r\n *\r\n * @param {LinkedList<T>} list\r\n * @param {LinkedListNode<T>} node\r\n * @param {number} count\r\n * @template T\r\n */\r\nfunction removeRange(list, node, count) {\r\n  var next = node.next\r\n  for (var i = 0; i < count && next !== list.tail; i++) {\r\n    next = next.next\r\n  }\r\n  node.next = next\r\n  next.prev = node\r\n  list.length -= i\r\n}\r\n/**\r\n * @param {LinkedList<T>} list\r\n * @returns {T[]}\r\n * @template T\r\n */\r\nfunction toArray(list) {\r\n  var array = []\r\n  var node = list.head.next\r\n  while (node !== list.tail) {\r\n    array.push(node.value)\r\n    node = node.next\r\n  }\r\n  return array\r\n}\r\n\r\nexport const Prism = _\r\n", "/**\r\n * @import {Element, Root, Text} from 'hast'\r\n * @import {Grammar, Languages} from 'prismjs'\r\n */\r\n\r\n/**\r\n * @typedef _Token\r\n *   Hidden Prism token.\r\n * @property {string} alias\r\n *   Alias.\r\n * @property {string} content\r\n *   Content.\r\n * @property {number} length\r\n *   Length.\r\n * @property {string} type\r\n *   Type.\r\n */\r\n\r\n/**\r\n * @typedef _Env\r\n *   Hidden Prism environment.\r\n * @property {Record<string, string>} attributes\r\n *   Attributes.\r\n * @property {Array<string>} classes\r\n *   Classes.\r\n * @property {Array<Element | Text> | Element | Text} content\r\n *   Content.\r\n * @property {string} language\r\n *   Language.\r\n * @property {string} tag\r\n *   Tag.\r\n * @property {string} type\r\n *   Type.\r\n */\r\n\r\n/**\r\n * @typedef {((prism: Refractor) => undefined | void) & {aliases?: Array<string> | undefined, displayName: string}} Syntax\r\n *   Refractor syntax function.\r\n */\r\n\r\n/**\r\n * @typedef Refractor\r\n *   Virtual syntax highlighting\r\n * @property {typeof alias} alias\r\n * @property {Languages} languages\r\n * @property {typeof listLanguages} listLanguages\r\n * @property {typeof highlight} highlight\r\n * @property {typeof registered} registered\r\n * @property {typeof register} register\r\n */\r\n\r\n// Load all stuff in `prism.js` itself, except for `prism-file-highlight.js`.\r\n// The wrapped non-leaky grammars are loaded instead of Prism’s originals.\r\nimport {h} from 'hastscript'\r\nimport {parseEntities} from 'parse-entities'\r\nimport {Prism} from './prism-core.js'\r\n\r\n// Inherit.\r\nfunction Refractor() {}\r\n\r\nRefractor.prototype = Prism\r\n\r\n/** @type {Refractor} */\r\n// @ts-expect-error: TS is wrong.\r\nexport const refractor = new Refractor()\r\n\r\n// Create.\r\nrefractor.highlight = highlight\r\nrefractor.register = register\r\nrefractor.alias = alias\r\nrefractor.registered = registered\r\nrefractor.listLanguages = listLanguages\r\n\r\n// @ts-expect-error Overwrite Prism.\r\nrefractor.util.encode = encode\r\n// @ts-expect-error Overwrite Prism.\r\nrefractor.Token.stringify = stringify\r\n\r\n/**\r\n * Highlight `value` (code) as `language` (programming language).\r\n *\r\n * @param {string} value\r\n *   Code to highlight.\r\n * @param {Grammar | string} language\r\n *   Programming language name, alias, or grammar.\r\n * @returns {Root}\r\n *   Node representing highlighted code.\r\n */\r\nfunction highlight(value, language) {\r\n  if (typeof value !== 'string') {\r\n    throw new TypeError('Expected `string` for `value`, got `' + value + '`')\r\n  }\r\n\r\n  /** @type {Grammar} */\r\n  let grammar\r\n  /** @type {string | undefined} */\r\n  let name\r\n\r\n  // `name` is a grammar object.\r\n  // This was called internally by Prism.js before 1.28.0.\r\n  /* c8 ignore next 2 */\r\n  if (language && typeof language === 'object') {\r\n    grammar = language\r\n  } else {\r\n    name = language\r\n\r\n    if (typeof name !== 'string') {\r\n      throw new TypeError('Expected `string` for `name`, got `' + name + '`')\r\n    }\r\n\r\n    if (Object.hasOwn(refractor.languages, name)) {\r\n      grammar = refractor.languages[name]\r\n    } else {\r\n      throw new Error('Unknown language: `' + name + '` is not registered')\r\n    }\r\n  }\r\n\r\n  return {\r\n    type: 'root',\r\n    // @ts-expect-error: we hacked Prism to accept and return the things we want.\r\n    children: Prism.highlight.call(refractor, value, grammar, name)\r\n  }\r\n}\r\n\r\n/**\r\n * Register a syntax.\r\n *\r\n * @param {Syntax} syntax\r\n *   Language function made for refractor, as in, the files in\r\n *   `refractor/lang/*.js`.\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nfunction register(syntax) {\r\n  if (typeof syntax !== 'function' || !syntax.displayName) {\r\n    throw new Error('Expected `function` for `syntax`, got `' + syntax + '`')\r\n  }\r\n\r\n  // Do not duplicate registrations.\r\n  if (!Object.hasOwn(refractor.languages, syntax.displayName)) {\r\n    syntax(refractor)\r\n  }\r\n}\r\n\r\n/**\r\n * Register aliases for already registered languages.\r\n *\r\n * @param {Record<string, ReadonlyArray<string> | string> | string} language\r\n *   Language to alias.\r\n * @param {ReadonlyArray<string> | string | null | undefined} [alias]\r\n *   Aliases.\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nfunction alias(language, alias) {\r\n  const languages = refractor.languages\r\n  /** @type {Record<string, ReadonlyArray<string> | string>} */\r\n  let map = {}\r\n\r\n  if (typeof language === 'string') {\r\n    if (alias) {\r\n      map[language] = alias\r\n    }\r\n  } else {\r\n    map = language\r\n  }\r\n\r\n  /** @type {string} */\r\n  let key\r\n\r\n  for (key in map) {\r\n    if (Object.hasOwn(map, key)) {\r\n      const value = map[key]\r\n      const list = typeof value === 'string' ? [value] : value\r\n      let index = -1\r\n\r\n      while (++index < list.length) {\r\n        languages[list[index]] = languages[key]\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Check whether an `alias` or `language` is registered.\r\n *\r\n * @param {string} aliasOrLanguage\r\n *   Language or alias to check.\r\n * @returns {boolean}\r\n *   Whether the language is registered.\r\n */\r\nfunction registered(aliasOrLanguage) {\r\n  if (typeof aliasOrLanguage !== 'string') {\r\n    throw new TypeError(\r\n      'Expected `string` for `aliasOrLanguage`, got `' + aliasOrLanguage + '`'\r\n    )\r\n  }\r\n\r\n  return Object.hasOwn(refractor.languages, aliasOrLanguage)\r\n}\r\n\r\n/**\r\n * List all registered languages (names and aliases).\r\n *\r\n * @returns {Array<string>}\r\n *   List of language names.\r\n */\r\nfunction listLanguages() {\r\n  const languages = refractor.languages\r\n  /** @type {Array<string>} */\r\n  const list = []\r\n  /** @type {string} */\r\n  let language\r\n\r\n  for (language in languages) {\r\n    if (\r\n      Object.hasOwn(languages, language) &&\r\n      typeof languages[language] === 'object'\r\n    ) {\r\n      list.push(language)\r\n    }\r\n  }\r\n\r\n  return list\r\n}\r\n\r\n/**\r\n * @param {Array<_Token | string> | _Token | string} value\r\n *   Token to stringify.\r\n * @param {string} language\r\n *   Language of the token.\r\n * @returns {Array<Element | Text> | Element | Text}\r\n *   Node representing the token.\r\n */\r\nfunction stringify(value, language) {\r\n  if (typeof value === 'string') {\r\n    return {type: 'text', value}\r\n  }\r\n\r\n  if (Array.isArray(value)) {\r\n    /** @type {Array<Element | Text>} */\r\n    const result = []\r\n    let index = -1\r\n\r\n    while (++index < value.length) {\r\n      if (\r\n        value[index] !== null &&\r\n        value[index] !== undefined &&\r\n        value[index] !== ''\r\n      ) {\r\n        // Cast because we assume no sub-arrays.\r\n        result.push(\r\n          /** @type {Element | Text} */ (stringify(value[index], language))\r\n        )\r\n      }\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  /** @type {_Env} */\r\n  const env = {\r\n    attributes: {},\r\n    classes: ['token', value.type],\r\n    content: stringify(value.content, language),\r\n    language,\r\n    tag: 'span',\r\n    type: value.type\r\n  }\r\n\r\n  if (value.alias) {\r\n    env.classes.push(\r\n      ...(typeof value.alias === 'string' ? [value.alias] : value.alias)\r\n    )\r\n  }\r\n\r\n  // @ts-expect-error Prism.\r\n  refractor.hooks.run('wrap', env)\r\n\r\n  return h(\r\n    env.tag + '.' + env.classes.join('.'),\r\n    attributes(env.attributes),\r\n    env.content\r\n  )\r\n}\r\n\r\n/**\r\n * @template {unknown} T\r\n *   Tokens.\r\n * @param {T} tokens\r\n *   Input.\r\n * @returns {T}\r\n *   Output, same as input.\r\n */\r\nfunction encode(tokens) {\r\n  return tokens\r\n}\r\n\r\n/**\r\n * @param {Record<string, string>} record\r\n *   Attributes.\r\n * @returns {Record<string, string>}\r\n *   Attributes.\r\n */\r\nfunction attributes(record) {\r\n  /** @type {string} */\r\n  let key\r\n\r\n  for (key in record) {\r\n    if (Object.hasOwn(record, key)) {\r\n      record[key] = parseEntities(record[key])\r\n    }\r\n  }\r\n\r\n  return record\r\n}\r\n", "/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Parent} Parent\r\n */\r\n\r\n/**\r\n * @template Fn\r\n * @template Fallback\r\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\r\n */\r\n\r\n/**\r\n * @callback Check\r\n *   Check that an arbitrary value is a node.\r\n * @param {unknown} this\r\n *   The given context.\r\n * @param {unknown} [node]\r\n *   Anything (typically a node).\r\n * @param {number | null | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {boolean}\r\n *   Whether this is a node and passes a test.\r\n *\r\n * @typedef {Record<string, unknown> | Node} Props\r\n *   Object to check for equivalence.\r\n *\r\n *   Note: `Node` is included as it is common but is not indexable.\r\n *\r\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\r\n *   Check for an arbitrary node.\r\n *\r\n * @callback TestFunction\r\n *   Check if a node passes a test.\r\n * @param {unknown} this\r\n *   The given context.\r\n * @param {Node} node\r\n *   A node.\r\n * @param {number | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {boolean | undefined | void}\r\n *   Whether this node passes the test.\r\n *\r\n *   Note: `void` is included until TS sees no return as `undefined`.\r\n */\r\n\r\n/**\r\n * Check if `node` is a `Node` and whether it passes the given test.\r\n *\r\n * @param {unknown} node\r\n *   Thing to check, typically `Node`.\r\n * @param {Test} test\r\n *   A check for a specific node.\r\n * @param {number | null | undefined} index\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} parent\r\n *   The node’s parent.\r\n * @param {unknown} context\r\n *   Context object (`this`) to pass to `test` functions.\r\n * @returns {boolean}\r\n *   Whether `node` is a node and passes a test.\r\n */\r\nexport const is =\r\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\r\n  /**\r\n   * @type {(\r\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\r\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\r\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\r\n   *   ((node?: null | undefined) => false) &\r\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\r\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\r\n   * )}\r\n   */\r\n  (\r\n    /**\r\n     * @param {unknown} [node]\r\n     * @param {Test} [test]\r\n     * @param {number | null | undefined} [index]\r\n     * @param {Parent | null | undefined} [parent]\r\n     * @param {unknown} [context]\r\n     * @returns {boolean}\r\n     */\r\n    // eslint-disable-next-line max-params\r\n    function (node, test, index, parent, context) {\r\n      const check = convert(test)\r\n\r\n      if (\r\n        index !== undefined &&\r\n        index !== null &&\r\n        (typeof index !== 'number' ||\r\n          index < 0 ||\r\n          index === Number.POSITIVE_INFINITY)\r\n      ) {\r\n        throw new Error('Expected positive finite index')\r\n      }\r\n\r\n      if (\r\n        parent !== undefined &&\r\n        parent !== null &&\r\n        (!is(parent) || !parent.children)\r\n      ) {\r\n        throw new Error('Expected parent node')\r\n      }\r\n\r\n      if (\r\n        (parent === undefined || parent === null) !==\r\n        (index === undefined || index === null)\r\n      ) {\r\n        throw new Error('Expected both parent and index')\r\n      }\r\n\r\n      return looksLikeANode(node)\r\n        ? check.call(context, node, index, parent)\r\n        : false\r\n    }\r\n  )\r\n\r\n/**\r\n * Generate an assertion from a test.\r\n *\r\n * Useful if you’re going to test many nodes, for example when creating a\r\n * utility where something else passes a compatible test.\r\n *\r\n * The created function is a bit faster because it expects valid input only:\r\n * a `node`, `index`, and `parent`.\r\n *\r\n * @param {Test} test\r\n *   *   when nullish, checks if `node` is a `Node`.\r\n *   *   when `string`, works like passing `(node) => node.type === test`.\r\n *   *   when `function` checks if function passed the node is true.\r\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\r\n *   *   when `array`, checks if any one of the subtests pass.\r\n * @returns {Check}\r\n *   An assertion.\r\n */\r\nexport const convert =\r\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\r\n  /**\r\n   * @type {(\r\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\r\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\r\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\r\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\r\n   *   ((test?: Test) => Check)\r\n   * )}\r\n   */\r\n  (\r\n    /**\r\n     * @param {Test} [test]\r\n     * @returns {Check}\r\n     */\r\n    function (test) {\r\n      if (test === null || test === undefined) {\r\n        return ok\r\n      }\r\n\r\n      if (typeof test === 'function') {\r\n        return castFactory(test)\r\n      }\r\n\r\n      if (typeof test === 'object') {\r\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\r\n      }\r\n\r\n      if (typeof test === 'string') {\r\n        return typeFactory(test)\r\n      }\r\n\r\n      throw new Error('Expected function, string, or object as test')\r\n    }\r\n  )\r\n\r\n/**\r\n * @param {Array<Props | TestFunction | string>} tests\r\n * @returns {Check}\r\n */\r\nfunction anyFactory(tests) {\r\n  /** @type {Array<Check>} */\r\n  const checks = []\r\n  let index = -1\r\n\r\n  while (++index < tests.length) {\r\n    checks[index] = convert(tests[index])\r\n  }\r\n\r\n  return castFactory(any)\r\n\r\n  /**\r\n   * @this {unknown}\r\n   * @type {TestFunction}\r\n   */\r\n  function any(...parameters) {\r\n    let index = -1\r\n\r\n    while (++index < checks.length) {\r\n      if (checks[index].apply(this, parameters)) return true\r\n    }\r\n\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * Turn an object into a test for a node with a certain fields.\r\n *\r\n * @param {Props} check\r\n * @returns {Check}\r\n */\r\nfunction propsFactory(check) {\r\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\r\n\r\n  return castFactory(all)\r\n\r\n  /**\r\n   * @param {Node} node\r\n   * @returns {boolean}\r\n   */\r\n  function all(node) {\r\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\r\n      /** @type {unknown} */ (node)\r\n    )\r\n\r\n    /** @type {string} */\r\n    let key\r\n\r\n    for (key in check) {\r\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\r\n    }\r\n\r\n    return true\r\n  }\r\n}\r\n\r\n/**\r\n * Turn a string into a test for a node with a certain type.\r\n *\r\n * @param {string} check\r\n * @returns {Check}\r\n */\r\nfunction typeFactory(check) {\r\n  return castFactory(type)\r\n\r\n  /**\r\n   * @param {Node} node\r\n   */\r\n  function type(node) {\r\n    return node && node.type === check\r\n  }\r\n}\r\n\r\n/**\r\n * Turn a custom test into a test for a node that passes that test.\r\n *\r\n * @param {TestFunction} testFunction\r\n * @returns {Check}\r\n */\r\nfunction castFactory(testFunction) {\r\n  return check\r\n\r\n  /**\r\n   * @this {unknown}\r\n   * @type {Check}\r\n   */\r\n  function check(value, index, parent) {\r\n    return Boolean(\r\n      looksLikeANode(value) &&\r\n        testFunction.call(\r\n          this,\r\n          value,\r\n          typeof index === 'number' ? index : undefined,\r\n          parent || undefined\r\n        )\r\n    )\r\n  }\r\n}\r\n\r\nfunction ok() {\r\n  return true\r\n}\r\n\r\n/**\r\n * @param {unknown} value\r\n * @returns {value is Node}\r\n */\r\nfunction looksLikeANode(value) {\r\n  return value !== null && typeof value === 'object' && 'type' in value\r\n}\r\n", "/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Parent} Parent\r\n *\r\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\r\n *   Test from `unist-util-is`.\r\n *\r\n *   Note: we have remove and add `undefined`, because otherwise when generating\r\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\r\n *   which doesn’t work when publishing on npm.\r\n */\r\n\r\n/**\r\n * @typedef Options\r\n *   Configuration (optional).\r\n * @property {boolean | null | undefined} [cascade=true]\r\n *   Whether to drop parent nodes if they had children, but all their children\r\n *   were filtered out (default: `true`).\r\n */\r\n\r\nimport {convert} from 'unist-util-is'\r\n\r\nconst own = {}.hasOwnProperty\r\n\r\n/**\r\n * Create a new `tree` of copies of all nodes that pass `test`.\r\n *\r\n * The tree is walked in *preorder* (NLR), visiting the node itself, then its\r\n * head, etc.\r\n *\r\n * @template {Node} Tree\r\n * @template {Test} Check\r\n *\r\n * @overload\r\n * @param {Tree} tree\r\n * @param {Options | null | undefined} options\r\n * @param {Check} test\r\n * @returns {import('./complex-types.js').Matches<Tree, Check>}\r\n *\r\n * @overload\r\n * @param {Tree} tree\r\n * @param {Check} test\r\n * @returns {import('./complex-types.js').Matches<Tree, Check>}\r\n *\r\n * @overload\r\n * @param {Tree} tree\r\n * @param {null | undefined} [options]\r\n * @returns {Tree}\r\n *\r\n * @param {Node} tree\r\n *   Tree to filter.\r\n * @param {Options | Test} [options]\r\n *   Configuration (optional).\r\n * @param {Test} [test]\r\n *   `unist-util-is` compatible test.\r\n * @returns {Node | undefined}\r\n *   New filtered tree.\r\n *\r\n *   `undefined` is returned if `tree` itself didn’t pass the test, or is\r\n *   cascaded away.\r\n */\r\nexport function filter(tree, options, test) {\r\n  const is = convert(test || options)\r\n  const cascadeRaw =\r\n    options && typeof options === 'object' && 'cascade' in options\r\n      ? /** @type {boolean | null | undefined} */ (options.cascade)\r\n      : undefined\r\n  const cascade =\r\n    cascadeRaw === undefined || cascadeRaw === null ? true : cascadeRaw\r\n\r\n  return preorder(tree)\r\n\r\n  /**\r\n   * @param {Node} node\r\n   *   Current node.\r\n   * @param {number | undefined} [index]\r\n   *   Index of `node` in `parent`.\r\n   * @param {Parent | undefined} [parentNode]\r\n   *   Parent node.\r\n   * @returns {Node | undefined}\r\n   *   Shallow copy of `node`.\r\n   */\r\n  function preorder(node, index, parentNode) {\r\n    /** @type {Array<Node>} */\r\n    const children = []\r\n\r\n    if (!is(node, index, parentNode)) return undefined\r\n\r\n    if (parent(node)) {\r\n      let childIndex = -1\r\n\r\n      while (++childIndex < node.children.length) {\r\n        const result = preorder(node.children[childIndex], childIndex, node)\r\n\r\n        if (result) {\r\n          children.push(result)\r\n        }\r\n      }\r\n\r\n      if (cascade && node.children.length > 0 && children.length === 0) {\r\n        return undefined\r\n      }\r\n    }\r\n\r\n    // Create a shallow clone, using the new children.\r\n    /** @type {typeof node} */\r\n    // @ts-expect-error all the fields will be copied over.\r\n    const next = {}\r\n    /** @type {string} */\r\n    let key\r\n\r\n    for (key in node) {\r\n      if (own.call(node, key)) {\r\n        // @ts-expect-error: Looks like a record.\r\n        next[key] = key === 'children' ? children : node[key]\r\n      }\r\n    }\r\n\r\n    return next\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Node} node\r\n * @returns {node is Parent}\r\n */\r\nfunction parent(node) {\r\n  return 'children' in node && node.children !== undefined\r\n}\r\n", "/**\r\n * @param {string} d\r\n * @returns {string}\r\n */\r\nexport function color(d) {\r\n  return d\r\n}\r\n", "/**\r\n * @typedef {import('unist').Node} UnistNode\r\n * @typedef {import('unist').Parent} UnistParent\r\n */\r\n\r\n/**\r\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\r\n *   Test from `unist-util-is`.\r\n *\r\n *   Note: we have remove and add `undefined`, because otherwise when generating\r\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\r\n *   which doesn’t work when publishing on npm.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Fn extends (value: any) => value is infer Thing\r\n *   ? Thing\r\n *   : Fallback\r\n * )} Predicate\r\n *   Get the value of a type guard `Fn`.\r\n * @template Fn\r\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\r\n * @template Fallback\r\n *   Value to yield if `Fn` is not a type guard.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Check extends null | undefined // No test.\r\n *   ? Value\r\n *   : Value extends {type: Check} // String (type) test.\r\n *   ? Value\r\n *   : Value extends Check // Partial test.\r\n *   ? Value\r\n *   : Check extends Function // Function test.\r\n *   ? Predicate<Check, Value> extends Value\r\n *     ? Predicate<Check, Value>\r\n *     : never\r\n *   : never // Some other test?\r\n * )} MatchesOne\r\n *   Check whether a node matches a primitive check in the type system.\r\n * @template Value\r\n *   Value; typically unist `Node`.\r\n * @template Check\r\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Check extends Array<any>\r\n *   ? MatchesOne<Value, Check[keyof Check]>\r\n *   : MatchesOne<Value, Check>\r\n * )} Matches\r\n *   Check whether a node matches a check in the type system.\r\n * @template Value\r\n *   Value; typically unist `Node`.\r\n * @template Check\r\n *   Value; typically `unist-util-is`-compatible test.\r\n */\r\n\r\n/**\r\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\r\n *   Number; capped reasonably.\r\n */\r\n\r\n/**\r\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\r\n *   Increment a number in the type system.\r\n * @template {Uint} [I=0]\r\n *   Index.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Node extends UnistParent\r\n *   ? Node extends {children: Array<infer Children>}\r\n *     ? Child extends Children ? Node : never\r\n *     : never\r\n *   : never\r\n * )} InternalParent\r\n *   Collect nodes that can be parents of `Child`.\r\n * @template {UnistNode} Node\r\n *   All node types in a tree.\r\n * @template {UnistNode} Child\r\n *   Node to search for.\r\n */\r\n\r\n/**\r\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\r\n *   Collect nodes in `Tree` that can be parents of `Child`.\r\n * @template {UnistNode} Tree\r\n *   All node types in a tree.\r\n * @template {UnistNode} Child\r\n *   Node to search for.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Depth extends Max\r\n *   ? never\r\n *   :\r\n *     | InternalParent<Node, Child>\r\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\r\n * )} InternalAncestor\r\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\r\n * @template {UnistNode} Node\r\n *   All node types in a tree.\r\n * @template {UnistNode} Child\r\n *   Node to search for.\r\n * @template {Uint} [Max=10]\r\n *   Max; searches up to this depth.\r\n * @template {Uint} [Depth=0]\r\n *   Current depth.\r\n */\r\n\r\n/**\r\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\r\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\r\n * @template {UnistNode} Tree\r\n *   All node types in a tree.\r\n * @template {UnistNode} Child\r\n *   Node to search for.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Tree extends UnistParent\r\n *     ? Depth extends Max\r\n *       ? Tree\r\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\r\n *     : Tree\r\n * )} InclusiveDescendant\r\n *   Collect all (inclusive) descendants of `Tree`.\r\n *\r\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\r\n *   > recurse without actually running into an infinite loop, which the\r\n *   > previous version did.\r\n *   >\r\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\r\n *   > passed, but it doesn’t improve performance.\r\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\r\n *   > Using up to `10` doesn’t hurt or help either.\r\n * @template {UnistNode} Tree\r\n *   Tree type.\r\n * @template {Uint} [Max=10]\r\n *   Max; searches up to this depth.\r\n * @template {Uint} [Depth=0]\r\n *   Current depth.\r\n */\r\n\r\n/**\r\n * @typedef {'skip' | boolean} Action\r\n *   Union of the action types.\r\n *\r\n * @typedef {number} Index\r\n *   Move to the sibling at `index` next (after node itself is completely\r\n *   traversed).\r\n *\r\n *   Useful if mutating the tree, such as removing the node the visitor is\r\n *   currently on, or any of its previous siblings.\r\n *   Results less than 0 or greater than or equal to `children.length` stop\r\n *   traversing the parent.\r\n *\r\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\r\n *   List with one or two values, the first an action, the second an index.\r\n *\r\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\r\n *   Any value that can be returned from a visitor.\r\n */\r\n\r\n/**\r\n * @callback Visitor\r\n *   Handle a node (matching `test`, if given).\r\n *\r\n *   Visitors are free to transform `node`.\r\n *   They can also transform the parent of node (the last of `ancestors`).\r\n *\r\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\r\n *   descendants to be walked (which is a bug).\r\n *\r\n *   When adding or removing previous siblings of `node` (or next siblings, in\r\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\r\n *   sibling to traverse after `node` is traversed.\r\n *   Adding or removing next siblings of `node` (or previous siblings, in case\r\n *   of reverse) is handled as expected without needing to return a new `Index`.\r\n *\r\n *   Removing the children property of an ancestor still results in them being\r\n *   traversed.\r\n * @param {Visited} node\r\n *   Found node.\r\n * @param {Array<VisitedParents>} ancestors\r\n *   Ancestors of `node`.\r\n * @returns {VisitorResult}\r\n *   What to do next.\r\n *\r\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\r\n *   An `Action` is treated as a tuple of `[Action]`.\r\n *\r\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\r\n *   When the `Action` is `EXIT`, that action can be returned.\r\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\r\n * @template {UnistNode} [Visited=UnistNode]\r\n *   Visited node type.\r\n * @template {UnistParent} [VisitedParents=UnistParent]\r\n *   Ancestor type.\r\n */\r\n\r\n/**\r\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\r\n *   Build a typed `Visitor` function from a tree and a test.\r\n *\r\n *   It will infer which values are passed as `node` and which as `parents`.\r\n * @template {UnistNode} [Tree=UnistNode]\r\n *   Tree type.\r\n * @template {Test} [Check=Test]\r\n *   Test type.\r\n */\r\n\r\nimport {convert} from 'unist-util-is'\r\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\r\n\r\n/** @type {Readonly<ActionTuple>} */\r\nconst empty = []\r\n\r\n/**\r\n * Continue traversing as normal.\r\n */\r\nexport const CONTINUE = true\r\n\r\n/**\r\n * Stop traversing immediately.\r\n */\r\nexport const EXIT = false\r\n\r\n/**\r\n * Do not traverse this node’s children.\r\n */\r\nexport const SKIP = 'skip'\r\n\r\n/**\r\n * Visit nodes, with ancestral information.\r\n *\r\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\r\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\r\n *\r\n * You can choose for which nodes `visitor` is called by passing a `test`.\r\n * For complex tests, you should test yourself in `visitor`, as it will be\r\n * faster and will have improved type information.\r\n *\r\n * Walking the tree is an intensive task.\r\n * Make use of the return values of the visitor when possible.\r\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\r\n * to check if a node matches, and then perform different operations.\r\n *\r\n * You can change the tree.\r\n * See `Visitor` for more info.\r\n *\r\n * @overload\r\n * @param {Tree} tree\r\n * @param {Check} check\r\n * @param {BuildVisitor<Tree, Check>} visitor\r\n * @param {boolean | null | undefined} [reverse]\r\n * @returns {undefined}\r\n *\r\n * @overload\r\n * @param {Tree} tree\r\n * @param {BuildVisitor<Tree>} visitor\r\n * @param {boolean | null | undefined} [reverse]\r\n * @returns {undefined}\r\n *\r\n * @param {UnistNode} tree\r\n *   Tree to traverse.\r\n * @param {Visitor | Test} test\r\n *   `unist-util-is`-compatible test\r\n * @param {Visitor | boolean | null | undefined} [visitor]\r\n *   Handle each node.\r\n * @param {boolean | null | undefined} [reverse]\r\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\r\n * @returns {undefined}\r\n *   Nothing.\r\n *\r\n * @template {UnistNode} Tree\r\n *   Node type.\r\n * @template {Test} Check\r\n *   `unist-util-is`-compatible test.\r\n */\r\nexport function visitParents(tree, test, visitor, reverse) {\r\n  /** @type {Test} */\r\n  let check\r\n\r\n  if (typeof test === 'function' && typeof visitor !== 'function') {\r\n    reverse = visitor\r\n    // @ts-expect-error no visitor given, so `visitor` is test.\r\n    visitor = test\r\n  } else {\r\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\r\n    check = test\r\n  }\r\n\r\n  const is = convert(check)\r\n  const step = reverse ? -1 : 1\r\n\r\n  factory(tree, undefined, [])()\r\n\r\n  /**\r\n   * @param {UnistNode} node\r\n   * @param {number | undefined} index\r\n   * @param {Array<UnistParent>} parents\r\n   */\r\n  function factory(node, index, parents) {\r\n    const value = /** @type {Record<string, unknown>} */ (\r\n      node && typeof node === 'object' ? node : {}\r\n    )\r\n\r\n    if (typeof value.type === 'string') {\r\n      const name =\r\n        // `hast`\r\n        typeof value.tagName === 'string'\r\n          ? value.tagName\r\n          : // `xast`\r\n          typeof value.name === 'string'\r\n          ? value.name\r\n          : undefined\r\n\r\n      Object.defineProperty(visit, 'name', {\r\n        value:\r\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\r\n      })\r\n    }\r\n\r\n    return visit\r\n\r\n    function visit() {\r\n      /** @type {Readonly<ActionTuple>} */\r\n      let result = empty\r\n      /** @type {Readonly<ActionTuple>} */\r\n      let subresult\r\n      /** @type {number} */\r\n      let offset\r\n      /** @type {Array<UnistParent>} */\r\n      let grandparents\r\n\r\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\r\n        // @ts-expect-error: `visitor` is now a visitor.\r\n        result = toResult(visitor(node, parents))\r\n\r\n        if (result[0] === EXIT) {\r\n          return result\r\n        }\r\n      }\r\n\r\n      if ('children' in node && node.children) {\r\n        const nodeAsParent = /** @type {UnistParent} */ (node)\r\n\r\n        if (nodeAsParent.children && result[0] !== SKIP) {\r\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\r\n          grandparents = parents.concat(nodeAsParent)\r\n\r\n          while (offset > -1 && offset < nodeAsParent.children.length) {\r\n            const child = nodeAsParent.children[offset]\r\n\r\n            subresult = factory(child, offset, grandparents)()\r\n\r\n            if (subresult[0] === EXIT) {\r\n              return subresult\r\n            }\r\n\r\n            offset =\r\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\r\n          }\r\n        }\r\n      }\r\n\r\n      return result\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Turn a return value into a clean result.\r\n *\r\n * @param {VisitorResult} value\r\n *   Valid return values from visitors.\r\n * @returns {Readonly<ActionTuple>}\r\n *   Clean result.\r\n */\r\nfunction toResult(value) {\r\n  if (Array.isArray(value)) {\r\n    return value\r\n  }\r\n\r\n  if (typeof value === 'number') {\r\n    return [CONTINUE, value]\r\n  }\r\n\r\n  return value === null || value === undefined ? empty : [value]\r\n}\r\n", "import type {\n  ElementContent,\n  Node,\n  Parent,\n  Element as RefractorElement,\n  Root as RefractorRoot,\n  RootContent,\n  Text,\n} from 'hast'\nimport {filter} from 'unist-util-filter'\nimport {visitParents} from 'unist-util-visit-parents'\n\nimport type {Marker} from './types.js'\n\nexport function addMarkers(\n  ast: RefractorRoot,\n  options: {markers: (Marker | number)[]},\n): RefractorRoot {\n  const markers = options.markers\n    .map((marker) => (typeof marker === 'number' ? {line: marker} : marker))\n    .sort((nodeA, nodeB) => nodeA.line - nodeB.line)\n\n  const numbered = lineNumberify(ast.children).nodes\n  if (markers.length === 0 || numbered.length === 0) {\n    return {...ast, children: numbered}\n  }\n\n  return wrapLines(numbered, markers, options)\n}\n\nfunction lineNumberify(ast: RootContent[], context = {lineNumber: 1}) {\n  const resultNodes: ElementContent[] = []\n  return ast.reduce(\n    (result, node) => {\n      if (node.type === 'doctype') {\n        return result // Doctypes are not relevant for line numbers\n      }\n\n      const lineStart = context.lineNumber\n\n      if (node.type === 'text') {\n        if (node.value.indexOf('\\n') === -1) {\n          setLineInfo(node, lineStart, lineStart)\n          result.nodes.push(node)\n          return result\n        }\n\n        const lines = node.value.split('\\n')\n        for (let i = 0; i < lines.length; i++) {\n          const lineNum = i === 0 ? context.lineNumber : ++context.lineNumber\n          const text: Text = {\n            type: 'text',\n            value: i === lines.length - 1 ? lines[i] : `${lines[i]}\\n`,\n          }\n          const withLineInfo = setLineInfo(text, lineNum, lineNum)\n          result.nodes.push(withLineInfo)\n        }\n\n        result.lineNumber = context.lineNumber\n        return result\n      }\n\n      if (node.type === 'element' && node.children) {\n        const processed = lineNumberify(node.children, context)\n        const firstChild = processed.nodes.find(isElementOrText)\n        const lastChild = processed.nodes.findLast(isElementOrText)\n        setLineInfo(\n          node,\n          firstChild ? getLineStart(firstChild, lineStart) : lineStart,\n          lastChild ? getLineEnd(lastChild, lineStart) : lineStart,\n        )\n        node.children = processed.nodes\n        result.lineNumber = processed.lineNumber\n        result.nodes.push(node)\n        return result\n      }\n\n      result.nodes.push(node)\n      return result\n    },\n    {nodes: resultNodes, lineNumber: context.lineNumber},\n  )\n}\n\nfunction isElementOrText(node: RootContent | Node): node is RefractorElement | Text {\n  return node.type === 'element' || node.type === 'text'\n}\n\nfunction getLineStart(node: Node, fallbackLineStart = 1) {\n  return node.data && typeof node.data.lineStart === 'number'\n    ? node.data.lineStart\n    : fallbackLineStart\n}\n\nfunction getLineEnd(node: Node, fallbackLineEnd = 1) {\n  return node.data && typeof node.data.lineEnd === 'number' ? node.data.lineEnd : fallbackLineEnd\n}\n\nfunction setLineInfo<T extends RefractorElement | Text | Parent>(\n  node: T,\n  lineStart: number,\n  lineEnd: number,\n): T {\n  if (!node.data) {\n    node.data = {}\n  }\n\n  node.data.lineStart = lineStart\n  node.data.lineEnd = lineEnd\n  return node\n}\n\nfunction unwrapLine(markerLine: number, nodes: RootContent[]) {\n  const tree: RefractorRoot = {type: 'root', children: nodes}\n\n  const headMap = new WeakMap()\n  const lineMap = new WeakMap()\n  const tailMap = new WeakMap()\n  const cloned: Node[] = []\n\n  function addCopy(\n    map: WeakMap<object, any>,\n    node: Text,\n    ancestors: Array<RefractorRoot | RefractorElement>,\n  ) {\n    cloned.push(node)\n\n    ancestors.forEach((ancestor) => {\n      if (!map.has(ancestor)) {\n        map.set(ancestor, Object.assign({}, ancestor, {children: []}))\n\n        if (ancestor !== tree) {\n          cloned.push(ancestor)\n        }\n      }\n    })\n\n    let i = ancestors.length\n    while (i--) {\n      const ancestor = map.get(ancestors[i])\n      if (!ancestor || !('children' in ancestor)) {\n        continue\n      }\n\n      const child = ancestors[i + 1]\n      const leaf = map.get(child) || node\n      if (ancestor.children.indexOf(leaf) === -1) {\n        ancestor.children.push(leaf)\n      }\n    }\n  }\n\n  visitParents(tree, (node, ancestors) => {\n    if ('children' in node || !isElementOrText(node)) {\n      return\n    }\n\n    // These nodes are on previous lines, but nested within the same structure\n    if (getLineStart(node) < markerLine) {\n      addCopy(headMap, node, ancestors)\n      return\n    }\n\n    // These nodes are on the target line\n    if (getLineStart(node) === markerLine) {\n      addCopy(lineMap, node, ancestors)\n      return\n    }\n\n    // If we have shared ancestors with some of the cloned elements,\n    // create another tree of the remaining nodes\n    if (getLineEnd(node) > markerLine && cloned.some((clone) => ancestors.includes(clone as any))) {\n      addCopy(tailMap, node, ancestors)\n    }\n  })\n\n  // Get the remaining nodes - the ones who were not part of the same tree\n  const filtered = filter(tree, (node) => cloned.indexOf(node as any) === -1)\n  const getChildren = (map: WeakMap<Node, Parent>) => {\n    const rootNode = map.get(tree)\n    if (!rootNode) {\n      return []\n    }\n\n    visitParents(rootNode, (leaf, ancestors) => {\n      if (isElementOrText(leaf) && 'children' in leaf) {\n        setLineInfo(leaf, 0, 0)\n        return\n      }\n\n      ancestors.forEach((ancestor) => {\n        setLineInfo(\n          ancestor,\n          Math.max(getLineStart(ancestor), getLineStart(leaf)),\n          Math.max(getLineEnd(ancestor), getLineEnd(leaf)),\n        )\n      })\n    })\n\n    return rootNode.children\n  }\n\n  const merged = [\n    ...getChildren(headMap),\n    ...getChildren(lineMap),\n    ...getChildren(tailMap),\n    ...(filtered ? filtered.children : []),\n  ]\n\n  return merged\n}\n\nfunction wrapBatch(\n  children: Array<ElementContent>,\n  marker: Marker,\n  options: {markers: (Marker | number)[]},\n): RefractorElement {\n  const className = marker.className || 'refractor-marker'\n  const baseData: RefractorElement['data'] = {\n    lineStart: marker.line,\n    lineEnd: getLineEnd(children[children.length - 1]),\n    isMarker: true,\n  }\n  return {\n    type: 'element',\n    tagName: 'div',\n    data: marker.component\n      ? {...baseData, component: marker.component, markerProperties: options}\n      : baseData,\n    properties: {className},\n    children,\n  }\n}\n\nfunction wrapLines(\n  treeNodes: RootContent[],\n  markers: Marker[],\n  options: {markers: (Marker | number)[]},\n): RefractorRoot {\n  const ast: Array<RootContent> = markers.reduce(\n    (acc, marker) => unwrapLine(marker.line, acc),\n    treeNodes,\n  )\n  const wrapped: Array<RootContent> = []\n\n  // Note: Markers are already sorted by line number (ascending)\n  let astIndex: number = 0\n  for (let m = 0; m < markers.length; m++) {\n    const marker = markers[m]\n\n    // Start by eating all AST nodes with line numbers up to the given marker\n    for (let node = ast[astIndex]; node && getLineEnd(node) < marker.line; node = ast[++astIndex]) {\n      wrapped.push(node)\n    }\n\n    // Now proceed to find all _contiguous_ nodes on the same line\n    const batch: Array<ElementContent> = []\n    for (\n      let node = ast[astIndex];\n      node && getLineEnd(node) === marker.line;\n      node = ast[++astIndex]\n    ) {\n      if (node.type !== 'doctype') {\n        batch.push(node)\n      }\n    }\n\n    // Now add that batch, if we have anything\n    if (batch.length > 0) {\n      wrapped.push(wrapBatch(batch, marker, options))\n    }\n  }\n\n  // Now add the remaining AST nodes\n  while (astIndex < ast.length) {\n    wrapped.push(ast[astIndex++])\n  }\n\n  return {type: 'root', children: wrapped}\n}\n", "import {createElement, type JSXElementConstructor, type ReactElement} from 'react'\nimport {type ElementContent, type RootContent} from 'hast'\nimport type {ReactRefractorMarkerDataWithComponent} from './types.js'\n\n/**\n * @internal\n */\nexport function mapWithDepth(\n  depth: number,\n): (\n  child: ElementContent | RootContent,\n  i: number,\n) => string | ReactElement<unknown, string | JSXElementConstructor<unknown>> | null {\n  return function mapChildrenWithDepth(child: ElementContent | RootContent, i: number) {\n    return mapChild(child, i, depth)\n  }\n}\n\nfunction mapChild(\n  child: ElementContent | RootContent,\n  i: number,\n  depth: number,\n): string | ReactElement | null {\n  if (child.type === 'doctype') {\n    return null\n  }\n\n  if (!('tagName' in child)) {\n    return child.value\n  }\n\n  let className = ''\n  if (typeof child.properties !== 'undefined') {\n    className = Array.isArray(child.properties.className)\n      ? child.properties.className.join(' ')\n      : `${child.properties.className}`\n  }\n\n  const key = `fract-${depth}-${i}`\n  const children = child.children && child.children.map(mapWithDepth(depth + 1))\n\n  if (!isReactRefractorMarkerDataWithComponent(child.data)) {\n    return createElement(child.tagName, {key, className}, children)\n  }\n\n  return createElement(\n    child.data.component,\n    {key, ...child.properties, ...child.data.markerProperties, className},\n    children,\n  )\n}\n\nfunction isReactRefractorMarkerDataWithComponent(\n  data: unknown,\n): data is ReactRefractorMarkerDataWithComponent {\n  return (\n    typeof data === 'object' && data !== null && 'component' in data && 'markerProperties' in data\n  )\n}\n", "import type {HTMLAttributes} from 'react'\nimport type {Syntax} from 'refractor'\nimport {refractor as fract} from 'refractor/core'\nimport {addMarkers} from './addMarkers.js'\nimport {mapWithDepth} from './mapChildren.js'\nimport type {RefractorProps} from './types.js'\n\nconst DEFAULT_CLASSNAME = 'refractor'\n\n/**\n * @public\n */\nexport function Refractor(props: RefractorProps) {\n  const className = props.className || DEFAULT_CLASSNAME\n  const langClassName = `language-${props.language}`\n  const codeProps: HTMLAttributes<HTMLElement> = {className: langClassName}\n  const preClass = [className, langClassName].filter(Boolean).join(' ')\n\n  if (props.inline) {\n    codeProps.style = {display: 'inline'}\n    codeProps.className = className\n  }\n\n  if (props.plainText) {\n    const code = <code {...codeProps}>{props.value}</code>\n    return props.inline ? code : <pre className={preClass}>{code}</pre>\n  }\n\n  let ast = fract.highlight(props.value, props.language)\n  if (props.markers && props.markers.length > 0) {\n    ast = addMarkers(ast, {markers: props.markers})\n  }\n\n  const value = ast.children.length === 0 ? props.value : ast.children.map(mapWithDepth(0))\n\n  const code = <code {...codeProps}>{value}</code>\n  return props.inline ? code : <pre className={preClass}>{code}</pre>\n}\n\n/**\n * @public\n */\nexport const registerLanguage = (lang: Syntax) => fract.register(lang)\n\n/**\n * @public\n */\nexport const hasLanguage = (lang: string) => fract.registered(lang)\n"],
  "mappings": "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",
  "names": ["_", "attributes", "attributes", "_", "_", "html", "svg", "parse", "h", "value", "parse", "html", "svg", "following", "alias", "alias", "checks", "index", "parent", "is", "is", "__spreadProps", "__spreadValues", "Refractor", "code", "fract"]
}
